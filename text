Функция НайтиПеречисление(_Перечисление, ВидПеречисления = "") Экспорт
	
	ПерОбъект = "";
	Если ВидПеречисления = "ППВ" Тогда
		Если _Перечисление = "ОплатаПокупателя" тогда //Для входящих платежек
			ПерОбъект = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли _Перечисление = "ПрочееПоступлениеБезналичныхДенежныхСредств" тогда
			ПерОбъект = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступление;
		ИначеЕсли _Перечисление = "ПрочиеРасчетыСКонтрагентами" тогда
			ПерОбъект = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли _Перечисление = "ВозвратДенежныхСредствПоставщиком" тогда
			ПерОбъект = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратОтПоставщика;
		ИначеЕсли _Перечисление = "РасчетыПоКредитамИЗаймамСКонтрагентами" Тогда
			ПерОбъект = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
		КонецЕсли;	
	КонецЕсли;
	
	Если ВидПеречисления = "ППИ" Тогда
		Если _Перечисление = "ВозвратДенежныхСредствПокупателю" тогда //Для исходящих платежек!
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;	
		ИначеЕсли _Перечисление = "ПрочееСписаниеБезналичныхДенежныхСредств" тогда
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
		ИначеЕсли _Перечисление = "ОплатаПоставщику" тогда
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		ИначеЕсли _Перечисление = "ПрочиеРасчетыСКонтрагентами" тогда
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
		ИначеЕсли _Перечисление = "ПеречислениеНалога" тогда
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
		ИначеЕсли _Перечисление = "РасчетыПоКредитамИЗаймамСКонтрагентами" Тогда
			ПерОбъект = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисления = "НДС" Тогда
		Если _Перечисление = "НДС18" Тогда //Ставки НДС
			ПерОбъект = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли _Перечисление = "НДС10" Тогда 
			ПерОбъект = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли _Перечисление = "БезНДС" Тогда 
			ПерОбъект = Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли _Перечисление = "НДС0" Тогда
			ПерОбъект = Перечисления.СтавкиНДС.НДС0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисления = "ПКО" Тогда
		Если _Перечисление = "ОплатаПокупателя" тогда //ПКО
			ПерОбъект = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		ИначеЕсли _Перечисление = "ПриходДенежныхСредствРозничнаяВыручка" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
		ИначеЕсли _Перечисление = "ПолучениеНаличныхДенежныхСредствВБанке" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке;
		ИначеЕсли _Перечисление = "РасчетыПоКредитамИЗаймамСКонтрагентами" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам;
		ИначеЕсли _Перечисление = "ВозвратДенежныхСредствПодотчетником" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица;
		ИначеЕсли _Перечисление = "ВозвратДенежныхСредствПоставщиком" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
		ИначеЕсли _Перечисление = "ПриходДенежныхСредствПрочее" тогда
			ПерОбъект = Перечисления.ВидыОперацийПКО.ПрочийПриход;	
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисления = "РКО" Тогда	
		Если _Перечисление = "ОплатаПоставщику" Тогда //РКО
			ПерОбъект = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		ИначеЕсли _Перечисление = "ВозвратДенежныхСредствПокупателю" Тогда 
			ПерОбъект = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;		
		ИначеЕсли _Перечисление = "ВыдачаДенежныхСредствПодотчетнику" Тогда 
			ПерОбъект = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу;	
		ИначеЕсли _Перечисление = "РасходДенежныхСредствПрочее" Тогда 
			ПерОбъект = Перечисления.ВидыОперацийРКО.ПрочийРасход;	
		ИначеЕсли _Перечисление = "ВыдачаДенежныхСредствКассеККМ" Тогда 
			ПерОбъект = Перечисления.ВидыОперацийРКО.Инкассация;	
		ИначеЕсли _Перечисление = "ВзносНаличнымиВБанк" Тогда 
			ПерОбъект = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		ИначеЕсли _Перечисление = "РасчетыПоКредитамИЗаймамСКонтрагентами" тогда
			ПерОбъект = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисления = "НДСВСтоимости" Тогда
		Если _Перечисление = "НеИзменять" Тогда
			ПерОбъект = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		ИначеЕсли _Перечисление = "ВключитьВСтоимость" Тогда
			ПерОбъект = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
		ИначеЕсли _Перечисление = "ИсключитьИзСтоимости" Тогда
			ПерОбъект = Перечисления.ДействиеНДСВСтоимостиТоваров.ИсключитьИзСтоимости;
		КонецЕсли;
	КонецЕсли;	
	
	Если ВидПеречисления = "ВидСклада" Тогда
		Если _Перечисление = "Оптовый" Тогда
			ПерОбъект = Перечисления.ВидыСкладов.Оптовый;
		ИначеЕсли _Перечисление = "Розничный" Тогда
			ПерОбъект = Перечисления.ВидыСкладов.Розничный;
		ИначеЕсли _Перечисление = "НТТ" Тогда
			ПерОбъект = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисления = "Комплектация" Тогда
		Если _Перечисление = "Комплектация" Тогда
			ПерОбъект = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
		Иначе
			ПерОбъект = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация;	
		КонецЕсли;		
	КонецЕсли;
	
	
	Возврат ПерОбъект;
КонецФункции


Функция НайтиРасчетныйСчет(РС_УТ, Владелец) Экспорт
	РС = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",РС_УТ.НомерСчета, ,Владелец);
	Если РС.Пустая() Тогда
		РС = Справочники.БанковскиеСчета.СоздатьЭлемент();
		РС.Банк = Справочники.Банки.НайтиПоКоду(РС_УТ.Банк.Код);
		РС.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
		РС.ВидСчета = "Расчетный";
		РС.Наименование = РС_УТ.Наименование;
		РС.НомерСчета = РС_УТ.НомерСчета;
		РС.МесяцПрописью = Ложь;
		РС.Владелец = Владелец;
			Сообщить("попытка записать Р/С: """ + РС.Наименование + """ для """ + Строка(Владелец) + "");
		
		Попытка
			РС.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат РС.Ссылка;	
КонецФункции

Функция НайтиСтатьюДвиженияДенСредств(СтатьяУТ) Экспорт
	Статья = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду(СтатьяУТ.Код);
	Если Статья.Пустая() Тогда 
		Статья = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		Статья.Код = СтатьяУТ.Код;
		Статья.Наименование = СтатьяУТ.Наименование;
		Статья.Записать();
		Сообщить("Записана новая статья движения денежных средств """ + Строка(Статья)+"""");
	КонецЕсли;
	Возврат Статья.Ссылка;
КонецФункции

Функция НайтиСклад(СкладУТ) Экспорт 
	Склад = Справочники.Склады.НайтиПоКоду("00008");
	//Если Склад.Пустая() Тогда
	//	Склад = Справочники.Склады.СоздатьЭлемент();
	//	Склад.Код = СкладУТ.Код;
	//	Склад.ВидСклада = НайтиПеречисление(УТ.XMLString(СкладУТ.ВидСклада), "ВидСклада");
	//	Склад.Наименование = СкладУТ.Наименование;
	//	Если ЗначениеЗаполнено(СкладУТ.ТипЦенРозничнойТорговли.Код) Тогда
	//		Если ЗначениеЗаполнено(ТипЦеныДляРозничногоСклада) Тогда
	//			Склад.ТипЦенРозничнойТорговли = ТипЦеныДляРозничногоСклада;
	//		Иначе
	//			Склад.ТипЦенРозничнойТорговли = ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Попытка
	//		Склад.Записать();
	//		Сообщить("Записан склад: """ + Склад.Наименование + """");
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
	Возврат Склад.Ссылка;
		
КонецФункции
        
Процедура ОпределитьСчетаУчетаРасчетовСКонтрагентом(Док, СтрокаПлатеж, ВидДок = "") Экспорт
	//
	//Если ВидДок = "СписаниеППИ" Тогда
	//	Если НЕ (Док.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
	//		
	//		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//		Док.Организация, Док.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	//		
	//		ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	//		
	//		Если Док.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю тогда
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетовПокупателя);
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	//		Иначе
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетов);
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
	//		КонецЕсли;
	//	
	//	Иначе
	//		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//		Док.Организация, Док.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);			
	//		
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидДок = "ПоступлениеППВ" Тогда
	//	
	//	Если Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
	//		Если Док.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	//		Иначе
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	//		КонецЕсли; 
	//	ИначеЕсли Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
	//		
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	//		
	//	ИначеЕсли Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
	//		
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	//		
	//	ИначеЕсли Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация Тогда
	//		
	//		Если Док.СчетБанк.Валютный Тогда
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	//		Иначе
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	//		КонецЕсли;
	//		
	//	ИначеЕсли НЕ (Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
	//		
	//		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//		Организация, Док.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	//		
	//		ЭтоАванс = (СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать);
	//		
	//		Если Док.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика тогда
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетов);
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	//		Иначе
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ?(ЭтоАванс, Неопределено, СчетаУчета.СчетРасчетовПокупателя);
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидДок = "СписаниеРКО" Тогда
	//	
	//	Если НЕ (Док.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)Тогда
	//		
	//		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//		Организация, Док.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	//		
	//		Если Док.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
	//			
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	//			
	//		Иначе
	//			
	//			Если СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
	//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Неопределено;
	//			Иначе
	//				Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	//				Иначе
	//					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	//				КонецЕсли;
	//			КонецЕсли;
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидДок = "ПоступлениеПКО" Тогда
	//	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(Док.ВидОперации);
	//	Если НЕ ЕстьРасчетыПоКредитам Тогда
	//		
	//		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//		Организация, Док.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	//		
	//		Если Док.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
	//			
	//			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	//			
	//		Иначе
	//			
	//			Если СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
	//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Неопределено;
	//			Иначе
	//				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	//			КонецЕсли;
	//			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидДок = "АвОтчет" Тогда
	//	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
	//	Организация, СтрокаПлатеж.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	//	
	//	СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	//	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам   = СчетаУчета.СчетАвансов;
	//	
	//	Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	//	Иначе
	//		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	//	КонецЕсли;
	//	
	//	СтрокаПлатеж.Сделка = Неопределено		
	//	
	//КонецЕсли;
	
КонецПроцедуры
   


//Процедуры для переноса справочника "Контрагенты" + дополнительные справочники
//Договоры, КонтактнаяИнформация
Функция НайтиКонтрагента(КонтрагентУТ) Экспорт
	Контрагенты = Справочники.Контрагенты;
	Контрагент = "";
	//Контрагент = Контрагенты.НайтиПоРеквизиту("ИНН",КонтрагентУТ.ИНН);
	Если НЕ ЗначениеЗаполнено(Контрагент) тогда
		Контрагент = Контрагенты.НайтиПоНаименованию(КонтрагентУТ.Наименование, Истина); //
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			
			Если ЗначениеЗаполнено(КонтрагентУТ.ИНН) Тогда
				Контрагент = Контрагенты.НайтиПоРеквизиту("ИНН",КонтрагентУТ.ИНН);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Контрагент) тогда  // Если нет по ИНН, то создаем сразу
				
				Возврат СоздатьКонтрагента(КонтрагентУТ)
				
			Иначе 
				//Могут быть контрагенты с одинаковым ИНН, но разными наименованиями (пример - филиалы СП СДТУ)
				Если Контрагент.Наименование = КонтрагентУТ.Наименование тогда
					Возврат Контрагент.Ссылка;
				ИначеЕсли (Найти (Контрагент.Наименование,"УФК")) тогда	Возврат Контрагент.Ссылка;
				ИначеЕсли (Найти (Контрагент.Наименование,"КОМПАС")) тогда	Возврат Контрагент.Ссылка;
				ИначеЕсли (Найти (Контрагент.Наименование,"БФ АО")) тогда	Возврат Контрагент.Ссылка;
				ИначеЕсли (Найти (Контрагент.Наименование,"БФ АО")) тогда	Возврат Контрагент.Ссылка;
					
				Иначе
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	Контрагенты.Код,
					|	Контрагенты.Ссылка,
					|	Контрагенты.ИНН
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	Контрагенты.ИНН = &ИНН";
					Запрос.УстановитьПараметр("ИНН", КонтрагентУТ.ИНН);
					Результат = Запрос.Выполнить().Выгрузить();
					
					Сообщить("Найдены контрагенты с ИНН = " + Строка(КонтрагентУТ.ИНН) + " (контрагент в УТ """ + КонтрагентУТ.Наименование + """)");
					ВыбСтрока = Результат.ВыбратьСтроку("""ОК""-установить соответствие, ""ОТМЕНА""-создать нового!");
					Если ВыбСтрока = Неопределено Тогда 
						
						Возврат СоздатьКонтрагента(КонтрагентУТ);
						
					Иначе
						Возврат ВыбСтрока.Ссылка;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;// Конец условия по ИНН
		Иначе
			//Если Контрагент.Код <> КонтрагентУТ.Код Тогда //Заменим в БП на код из УТ, для того, чтобы потом поиск контрагента проходил быстрее
			//	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
			//	КонтрагентОбъект.Код = КонтрагентУТ.Код;
			//	//Попытка 
			//	КонтрагентОбъект.Записать();
			//	Сообщить("У контрагента """ + Контрагент.Наименование + """ изменен код на " + КонтрагентУТ.Код);
			//	//Исключение
			//	//КонецПопытки;
			//	Контрагент = КонтрагентОбъект.Ссылка;
			//КонецЕсли;
				
			Возврат Контрагент.Ссылка;
		КонецЕсли; //Конец условия по точному наименованию
	Иначе //Нашли по коду
		Возврат Контрагент.Ссылка;
	КонецЕсли;

КонецФункции

Функция СоздатьКонтрагента(КонтрагентУТ, Редактировать = Ложь) Экспорт
	Если Редактировать тогда //Редактируем только в случае синхронизации справочника
		КонтрагентБух = Справочники.Контрагенты.НайтиПоКоду(КонтрагентУТ.Код);
		Если КонтрагентБух.Пустая() Тогда 
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Код = КонтрагентУТ.Код;
		Иначе
			Контрагент = КонтрагентБух.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Код = "РМ"+Сред(КонтрагентУТ.Код,3);
	КонецЕсли;
		
	//Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Наименование = КонтрагентУТ.Наименование;
	
	Если СтрДлина(КонтрагентУТ.ИНН) = 12 Тогда
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Контрагент.НаименованиеПолное = КонтрагентУТ.НаименованиеПолное;
	Контрагент.Комментарий = КонтрагентУТ.Комментарий;
	Контрагент.ИНН = КонтрагентУТ.ИНН;
	Контрагент.КПП = КонтрагентУТ.КПП;
	Контрагент.Покупатель = истина;
	Контрагент.Поставщик = истина;
	
	Контрагент.Записать();
	Контрагент.ГоловнойКонтрагент = Контрагент.Ссылка;
	Контрагент.Записать();
	
	ПеренестиКонтактнуюИнформацию(КонтрагентУТ, Контрагент.Ссылка);
	
	//Перенос договоров
	ВыборкаДоговоровУТ = УТ.Справочники.ДоговорыКонтрагентов.Выбрать(, КонтрагентУТ);

	Пока ВыборкаДоговоровУТ.Следующий() Цикл
				Если СокрЛП(КонтрагентУТ.Родитель.Наименование)="Заказчики" Тогда
			НайтиДоговор(ВыборкаДоговоровУТ, Контрагент, "Покупатель")	
		ИначеЕсли СокрЛП(КонтрагентУТ.Родитель.Наименование)="Поставщики" Тогда
			НайтиДоговор(ВыборкаДоговоровУТ, Контрагент, "Поставщик")
		Иначе
			НайтиДоговор(ВыборкаДоговоровУТ, Контрагент, "Прочее")
		КонецЕсли;		
	КонецЦикла;
	
	//Перенос расчетных счетов
	ВыборкаРасчетныхСчетовУТ = УТ.Справочники.БанковскиеСчета.Выбрать(, КонтрагентУТ);
	Пока ВыборкаРасчетныхСчетовУТ.Следующий() Цикл
		НайтиРасчетныйСчет(ВыборкаРасчетныхСчетовУТ, Контрагент.Ссылка);
	КонецЦикла;
	
	Если Редактировать Тогда
		Сообщить("Добавили/изменили контрагента: """ + Контрагент.Наименование+"""");
	Иначе
		Сообщить("Добавили нового контрагента: """ + Контрагент.Наименование+"""");
	КонецЕсли;

	Возврат Контрагент.Ссылка;	
КонецФункции
 
Функция НайтиДоговор(ДоговорУТ, Контрагент, ВидДоговора="Покупатель") Экспорт
	
	ЗапросДоговора = Новый Запрос;
	ЗапросДоговора.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора
	|	И ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование";
	
	ЗапросДоговора.УстановитьПараметр("Владелец", Контрагент.Ссылка);
	ЗапросДоговора.УстановитьПараметр("Организация", Организация);
	ЗапросДоговора.УстановитьПараметр("Наименование", ДоговорУТ.Наименование);
	
	Если ВидДоговора = "Покупатель" Тогда 
		ЗапросДоговора.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ИначеЕсли ВидДоговора = "Поставщик" Тогда 
		ЗапросДоговора.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ИначеЕсли ВидДоговора = "Прочее" Тогда
		ЗапросДоговора.УстановитьПараметр("ВидДоговора",Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
	Если ЗапросДоговора.Выполнить().Выгрузить().Количество() <> 0 тогда
		Возврат ЗапросДоговора.Выполнить().Выгрузить()[0].Ссылка;
	Иначе
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();	
		ДоговорОбъект.Наименование          = ДоговорУТ.Наименование;
		ДоговорОбъект.Комментарий           = ДоговорУТ.Комментарий;
		ДоговорОбъект.Номер					= ДоговорУТ.Номер;
		ДоговорОбъект.Дата					= ДоговорУТ.Дата;
		
		ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();

		ДоговорОбъект.Организация  = Организация;

		ДоговорОбъект.Владелец    = Контрагент.Ссылка;
		
		ДоговорОбъект.ВедениеВзаиморасчетов    = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;

		
		Если ВидДоговора = "Покупатель" Тогда 
			ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		ИначеЕсли ВидДоговора = "Поставщик" Тогда
			ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		ИначеЕсли ВидДоговора = "Прочее" Тогда
			ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
		
		ОшибкаПриЗаписиДоговора = Ложь;
//		ДоговорОбъект.ПередЗаписью(ОшибкаПриЗаписиДоговора);
		
		Если ОшибкаПриЗаписиДоговора тогда
			
		Иначе
			Сообщить("Записали договор """ + Строка(ДоговорОбъект.Наименование) + """ для контрагента """ + Строка(Контрагент) + """");
			попытка
			ДоговорОбъект.Записать();
			исключение
			конецпопытки;
		КонецЕсли;
		
		Возврат ДоговорОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции
 
Процедура ПеренестиКонтактнуюИнформацию(КонтрагентУТ, Контрагент) Экспорт
	ЗапросУТ = УТ.NewObject("Запрос");
	//ТипАдресУТ = УТ.Перечисления.ТипыКонтактнойИнформации.Адрес;
	ВидЮрАдресУТ = УТ.Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;	
	ВидФактАдресУТ = УТ.Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	//ТипТелУТ = УТ.Перечисления.ТипыКонтактнойИнформации.Телефон;
	ВидТелУТ = УТ.Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	
	ЗапросУТ.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Поле1,
	|	КонтактнаяИнформация.Поле2,
	|	КонтактнаяИнформация.Поле3,
	|	КонтактнаяИнформация.Поле4,
	|	КонтактнаяИнформация.Поле5,
	|	КонтактнаяИнформация.Поле6,
	|	КонтактнаяИнформация.Поле7,
	|	КонтактнаяИнформация.Поле8,
	|	КонтактнаяИнформация.Поле9,
	|	КонтактнаяИнформация.Поле10,
	|	КонтактнаяИнформация.Тип,
	|	КонтактнаяИнформация.Вид
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект";
	
	ЗапросУт.УстановитьПараметр("Объект", КонтрагентУТ);
	//ЗапросУт.УстановитьПараметр("ТипАдресУТ", ТипАдресУТ);
	//ЗапросУт.УстановитьПараметр("ВидЮрАдресУТ", ВидЮрАдресУТ);
	//ЗапросУт.УстановитьПараметр("ТипТелУТ", ТипТелУТ);
	//ЗапросУт.УстановитьПараметр("ВидТелУТ", ВидТелУТ);
	
	КонтИнформация = ЗапросУТ.Выполнить().Выбрать();
	
	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор["Объект"].Значение = Контрагент;
	Набор.Отбор["Объект"].Использование = Истина;
	//Набор.Отбор["Вид"].Значение = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	//Набор.Отбор["Вид"].Использование = Истина;
	Набор.Прочитать();
	Набор.Очистить();
	
	Пока КонтИнформация.Следующий() Цикл
		Если КонтИнформация.Вид.Код = ВидЮрАдресУТ.Код Тогда
			НовЗапись = Набор.Добавить();
			НовЗапись.Поле1 = КонтИнформация.Поле1;
			НовЗапись.Поле2 = КонтИнформация.Поле2;
			НовЗапись.Поле3 = КонтИнформация.Поле3;
			НовЗапись.Поле4 = КонтИнформация.Поле4;
			НовЗапись.Поле5 = КонтИнформация.Поле5;
			НовЗапись.Поле6 = КонтИнформация.Поле6;
			НовЗапись.Поле7 = КонтИнформация.Поле7;
			НовЗапись.Поле8 = КонтИнформация.Поле8;
			НовЗапись.Поле9 = КонтИнформация.Поле9;
			НовЗапись.Поле10 = КонтИнформация.Поле10;
			НовЗапись.Представление = КонтИнформация.Представление;
			НовЗапись.Объект = Контрагент;
			НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			
		ИначеЕсли КонтИнформация.Вид.Код = ВидФактАдресУТ.Код Тогда
			НовЗапись = Набор.Добавить();
			НовЗапись.Поле1 = КонтИнформация.Поле1;
			НовЗапись.Поле2 = КонтИнформация.Поле2;
			НовЗапись.Поле3 = КонтИнформация.Поле3;
			НовЗапись.Поле4 = КонтИнформация.Поле4;
			НовЗапись.Поле5 = КонтИнформация.Поле5;
			НовЗапись.Поле6 = КонтИнформация.Поле6;
			НовЗапись.Поле7 = КонтИнформация.Поле7;
			НовЗапись.Поле8 = КонтИнформация.Поле8;
			НовЗапись.Поле9 = КонтИнформация.Поле9;
			НовЗапись.Поле10 = КонтИнформация.Поле10;
			НовЗапись.Представление = КонтИнформация.Представление;
			НовЗапись.Объект = Контрагент;
			НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;			
			
		ИначеЕсли КонтИнформация.Вид.Код = ВидТелУТ.Код Тогда
			НовЗапись = Набор.Добавить();
			НовЗапись.Поле1 = КонтИнформация.Поле1;
			НовЗапись.Поле2 = КонтИнформация.Поле2;
			НовЗапись.Поле3 = КонтИнформация.Поле3;
			НовЗапись.Поле4 = КонтИнформация.Поле4;
			НовЗапись.Поле5 = КонтИнформация.Поле5;
			НовЗапись.Поле6 = КонтИнформация.Поле6;
			НовЗапись.Поле7 = КонтИнформация.Поле7;
			НовЗапись.Поле8 = КонтИнформация.Поле8;
			НовЗапись.Поле9 = КонтИнформация.Поле9;
			НовЗапись.Поле10 = КонтИнформация.Поле10;
			НовЗапись.Представление = КонтИнформация.Представление;
			НовЗапись.Объект = Контрагент;
			НовЗапись.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НовЗапись.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		КонецЕсли;
		
	КонецЦикла;
	Набор.Записать();
		
КонецПроцедуры

Функция НайтиПодотчетника(ПодотчетникУТ) Экспорт
	Возврат "";
	
КонецФункции

Функция НайтиФизЛицо(ФизЛицоУТ) Экспорт
	ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФизЛицоУТ.Наименование);
	Если ФизЛицо.Пустая() Тогда 
		ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизЛицо.Наименование 	= ФизЛицоУТ.Наименование;
		ФизЛицо.ДатаРождения    = ФизЛицоУТ.ДатаРождения;
		ФизЛицо.Комментарий     = ФизЛицоУТ.Комментарий;
		ФизЛицо.Записать();
	КонецЕсли;
	
	Возврат ФизЛицо.Ссылка
			
КонецФункции

    
         
//Процедуры для переноса справочника "Номенклатура" + дополнительные справочники
//ГТД, Страны, Единицы
//
Функция СоздатьТовар(Товар, Редактировать = Ложь) Экспорт 
	
	Если ЗначениеЗаполнено(Товар.Родитель.Наименование) Тогда
		Родитель = Справочники.Номенклатура.НайтиПоНаименованию(Товар.Родитель.Наименование,истина);
		Если Родитель.Пустая() Тогда 
			Родитель = СоздатьРодителя(Товар.Родитель);
		КонецЕсли;
	Иначе 
		Родитель = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;

	Если Редактировать тогда //Редактируем только в случае синхронизации справочника
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Товар.Код);
		Если ТоварБух.Пустая() Тогда 
			НовыйТовар = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйТовар.Код = Товар.Код;
		Иначе
			НовыйТовар = ТоварБух.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		НовыйТовар = Справочники.Номенклатура.СоздатьЭлемент();
		НовыйТовар.Код = "РМ"+Сред(Товар.Код,8);
	КонецЕсли;
	
	НовыйТовар.Наименование = Товар.Наименование;
	НовыйТовар.Родитель = Родитель;
	
	Если ЗначениеЗаполнено(Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("НаименованиеПолное",Товар.БазоваяЕдиницаИзмерения.НаименованиеПолное)) тогда
		НовыйТовар.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("НаименованиеПолное",Товар.БазоваяЕдиницаИзмерения.НаименованиеПолное);
	Иначе
		НоваяЕдиница = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НоваяЕдиница.Наименование = Товар.БазоваяЕдиницаИзмерения.Наименование;
		НоваяЕдиница.УстановитьНовыйКод();
		НоваяЕдиница.НаименованиеПолное = Товар.БазоваяЕдиницаИзмерения.НаименованиеПолное;
		
		Попытка 
			НоваяЕдиница.Записать();
		Исключение
			Сообщить("Не записана единица для товара: """ + Строка(НовыйТовар.Наименование)+"""");
		КонецПопытки;
		
		НовыйТовар.БазоваяЕдиницаИзмерения = НоваяЕдиница;
	КонецЕсли;
	
	
	
	
	
	Если ЗначениеЗаполнено(Товар.СтранаПроисхождения.Наименование) Тогда
		НовыйТовар.СтранаПроисхождения = НайтиСтрану(Товар.СтранаПроисхождения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Товар.НомерГТД.Код) Тогда 
		НовыйТовар.НомерГТД = НайтиГТД(Товар.НомерГТД.Код);
	КонецЕсли;
	
	НовыйТовар.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001"); //основная номенклатурная группа
	НовыйТовар.НаименованиеПолное = Товар.НаименованиеПолное;
	НовыйТовар.Комментарий = товар.Комментарий;
	НовыйТовар.Артикул = Товар.Артикул;
	НовыйТовар.Услуга = Товар.Услуга;
	НовыйТовар.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Товар.СтавкаНДС), "НДС");
		
	Попытка
		НовыйТовар.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Редактировать Тогда 
		Сообщить("Добавили/изменили товар: """ + НовыйТовар.Наименование+"""");
	Иначе
		Сообщить("Записали новый товар: """ + НовыйТовар.Наименование+"""");
	КонецЕсли;
	
	
	
	Если ЗначениеЗаполнено(Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Товар.БазоваяЕдиницаИзмерения.Наименование)) тогда
		НовыйТовар.ЕдиницаХраненияОстатков = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(Товар.БазоваяЕдиницаИзмерения.Наименование);
	Иначе
		НоваяЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НоваяЕдиница.Наименование = Товар.БазоваяЕдиницаИзмерения.Наименование;
		НоваяЕдиница.УстановитьНовыйКод();
		НоваяЕдиница.ЕдиницаПоКлассификатору = НовыйТовар.БазоваяЕдиницаИзмерения;
		НоваяЕдиница.Коэффициент = 1;
		НоваяЕдиница.Владелец=НовыйТовар;//.Ссылка;
		Попытка 
			НоваяЕдиница.Записать();
		Исключение
			Сообщить("Не записана единица для товара: """ + Строка(НовыйТовар.Наименование)+"""");
		КонецПопытки;
		
	КонецЕсли;
	
    НовыйТовар.ЕдиницаХраненияОстатков = НоваяЕдиница;//.Ссылка;

	Попытка
		НовыйТовар.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	
	Возврат НовыйТовар.Ссылка;
КонецФункции

Функция СоздатьРодителя(РодительУТ)
	
	//Если ЗначениеЗаполнено(РодительУТ.Родитель.Код) тогда
	//	Родитель = Справочники.Номенклатура.НайтиПоКоду(РодительУТ.Родитель.Код);
	//	Если Родитель.Пустая() Тогда 
	//		Родитель = СоздатьРодителя(РодительУТ.Родитель);
	//	КонецЕсли;
	//	
	//	РодительОбъект = Справочники.Номенклатура.СоздатьГруппу();
	//	РодительОбъект.Родитель = Родитель.Ссылка;
	//	РодительОбъект.Код = РодительУТ.Код;
	//	РодительОбъект.Наименование = РодительУТ.Наименование;
	//	Попытка
	//		РодительОбъект.Записать();
	//	Исключение
	//		
	//	КонецПопытки;
	//Иначе
		РодительОбъект = Справочники.Номенклатура.СоздатьГруппу();
		РодительОбъект.Код = "П"+Сред(РодительУТ.Код,8);
		РодительОбъект.Наименование = РодительУТ.Наименование;
		Попытка
			РодительОбъект.Записать();
		Исключение
			
		КонецПопытки;
	//КонецЕсли;

	Возврат РодительОбъект.Ссылка;
КонецФункции

Функция НайтиГТД(ГТД) Экспорт
	Если НЕ ЗначениеЗаполнено(ГТД) Тогда 
		Возврат "";
	КонецЕсли;
		
	НомерГТД = Справочники.НомераГТД.НайтиПоКоду(ГТД);
	Если ЗначениеЗаполнено(НомерГТД) тогда
		Возврат НомерГТД.Ссылка;
	Иначе
		НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
		НомерГТД.Код = ГТД; 
		НомерГТД.Записать();
		возврат НомерГТД.Ссылка;
	КонецЕсли;
КонецФункции

Функция НайтиСтрану(СтранаУТ) Экспорт
	Если НЕ ЗначениеЗаполнено(СтранаУТ.Код) Тогда
		Возврат "";
	КонецЕсли;
	
	Страна = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтранаУТ.Код);
	Если ЗначениеЗаполнено(Страна) тогда
		Возврат Страна.Ссылка;
	Иначе
		Страна = Справочники.КлассификаторСтранМира.СоздатьЭлемент();
		Страна.Код = СтранаУТ.Код;
		Страна.Наименование = СтранаУТ.Наименование; 
		
		Попытка
			Страна.Записать();
		Исключение
			Сообщить("Не записана страна: """ + СтранаУТ.Наименование+"");
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат Страна.Ссылка;
	КонецЕсли;
КонецФункции


Функция НайтиПоступление(ПоступлениеУТ) Экспорт 
	//В некоторых случаях в поступлениях при переносе в БУХ
	//номер поступления = номеру Вх. документа, тогда ищем по запросу
	
	//Запрос = новый запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПоступлениеТоваровУслуг.Ссылка
	//|ИЗ
	//|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	//|ГДЕ
	//|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
	//|	И ПоступлениеТоваровУслуг.Дата = &Дата
	//|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента";
	//Запрос.УстановитьПараметр("НомерВходящегоДокумента",НомерДок);
	//Запрос.УстановитьПараметр("Дата",ДатаДок);
	//Запрос.УстановитьПараметр("СуммаДокумента",ОКР(СуммаДокумента,2));
	//Рез = Запрос.Выполнить().Выгрузить();
	НайденноеПоступление = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(ПоступлениеУТ.Номер, ПоступлениеУТ.Дата);
	//Если Рез.Количество() > 0 тогда
	//	НайденноеПоступление = Рез[0].Ссылка;
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	Возврат НайденноеПоступление;
КонецФункции

Функция НайтиСФ_В_УТ(ДокументОснование, Признак="Выданный") Экспорт 
	ЗапросУт = Ут.NewObject("Запрос");
	Если Признак = "Выданный" Тогда
		ЗапросУТ.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.ДокументОснование = &ДокументОснование";	
		ЗапросУт.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Результат = ЗапросУт.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Возврат Результат.Ссылка;
		КонецЦикла;
	Иначе
		ЗапросУТ.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДокументОснование = &ДокументОснование";	
		ЗапросУт.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Результат = ЗапросУт.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			Возврат Результат.Ссылка;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции


//Создание документов
Процедура СоздатьПоступление(ПоступленияУТ, НайденноеПоступление) Экспорт 
	
	Если ЗначениеЗаполнено(НайденноеПоступление) Тогда
		ПостБух = НайденноеПоступление.ПолучитьОбъект();
		ПостБух.Товары.Очистить();
		ПостБух.Услуги.Очистить();
	Иначе
		ПостБух = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ПостБух.Номер				= ПоступленияУТ.Номер;
	КонецЕсли;
	
	ПостБух.Дата 					= ПоступленияУТ.Дата;
	
	ЗаполнитьШапкуДокумента(ПостБух, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
	ПостБух.ВалютаДокумента 		= Справочники.Валюты.НайтиПоКоду(ПоступленияУТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
	ПостБух.ВидОперации 			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	ПостБух.ДатаВходящегоДокумента 	= ПоступленияУТ.ДатаВходящегоДокумента;
	ПостБух.Контрагент 				= НайтиКонтрагента(ПоступленияУТ.Контрагент);
	ПостБух.ДоговорКонтрагента		= НайтиДоговор(ПоступленияУТ.ДоговорКонтрагента, ПостБух.Контрагент,"Поставщик");
	ПостБух.Комментарий 			= ПоступленияУТ.Комментарий;
	ПостБух.КратностьВзаиморасчетов = 1;
	ПостБух.КурсВзаиморасчетов 		= 1;
	ПостБух.НомерВходящегоДокумента = ПоступленияУТ.НомерВходящегоДокумента;
	ПостБух.Склад 					= НайтиСклад(ПоступленияУТ.СкладОрдер);//ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ПостБух.Организация				= Организация;
	ПостБух.ЗаполнитьСчетаУчетаРасчетов();
	ПостБух.УчитыватьНДС			= ПоступленияУТ.УчитыватьНДС;
	ПостБух.СуммаВключаетНДС		= ПоступленияУТ.СуммаВключаетНДС;
	ПостБух.Ответственный			= Ответственный;
	
	ТоварыУТ = ПоступленияУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ПостБух.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.НомерГТД			= НайтиГТД(Стр.СерияНоменклатуры.НомерГТД.Код);
		НовСтрока.СтранаПроисхождения = НайтиСтрану(Стр.СерияНоменклатуры.СтранаПроисхождения);
	
		НовСтрока.ЕдиницаИзмерения = НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		НовСтрока.Коэффициент = 1;// т.к. переносим только базовые единицы измерения
		НовСтрока.Цена = Стр.Цена/стр.Коэффициент;
		НовСтрока.Сумма = Стр.Сумма;
		
		Если ПостБух.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			//РассчитатьСуммуНДСТабЧасти(НовСтрока, ПостБух);
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ПостБух);

		КонецЕсли;
		
	КонецЦикла;
	ПостБух.ЗаполнитьСчетаУчетаВТабЧасти(ПостБух.Товары, "Товары", Истина, Истина);
	
	УслугиУТ = ПоступленияУТ.Услуги;
	Для каждого Стр из УслугиУТ цикл
		УслугаБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		НовСтрока = ПостБух.Услуги.Добавить();
		Если НЕ ЗначениеЗаполнено(УслугаБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = УслугаБух;
		КонецЕсли;
		
		НовСтрока.Содержание = Стр.Содержание;
		НовСтрока.Количество = Стр.Количество;
		НовСтрока.Цена = стр.Цена;
		НовСтрока.Сумма = стр.Сумма;
		
		Если ПостБух.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			//РассчитатьСуммуНДСТабЧасти(НовСтрока, ПостБух);
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ПостБух);
			
		КонецЕсли;
	КонецЦикла;
	ПостБух.ЗаполнитьСчетаУчетаВТабЧасти(ПостБух.Услуги, "Услуги", Истина, Истина);
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ПостБух.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ПостБух.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденноеПоступление) Тогда
			Сообщить("Изменен документ: """ + ПостБух.Номер + """ от: " + Формат(ПостБух.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + ПостБух.Номер + """ от: " + Формат(ПостБух.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
		СФ_УТ = НайтиСФ_В_УТ(ПоступленияУТ.Ref, "Полученный");
		Если СФ_УТ <> Неопределено Тогда 
			СоздатьСФ(СФ_УТ, ПостБух, "Полученный");
		КонецЕсли;
		
	Исключение 
		Сообщить("Пропущен документ поступление: """ + ПоступленияУТ.Номер + """ от: " + Формат(ПоступленияУТ.Дата, "ДЛФ=Д"));
	КонецПопытки;
		
КонецПроцедуры

Процедура СоздатьРеализацию(РеализацияУТ, НайденнаяРеализация) Экспорт
	
	Если ЗначениеЗаполнено(НайденнаяРеализация) Тогда
		НаклБух = НайденнаяРеализация.ПолучитьОбъект();
		НаклБух.Товары.Очистить();
		НаклБух.Услуги.Очистить();
	Иначе
		НаклБух = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		РеализДрБазаНомер="ПР"+ Прав(РеализацияУТ.Номер,6);
		НаклБух.Номер				= РеализДрБазаНомер;
	КонецЕсли;
	
	НаклБух.Дата 					= РеализацияУТ.Дата;
	НаклБух.ВалютаДокумента 		= Справочники.Валюты.НайтиПоКоду(РеализацияУТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
	НаклБух.ВидОперации 			= Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	НаклБух.Контрагент 				= НайтиКонтрагента(РеализацияУТ.Контрагент);
	НаклБух.ДоговорКонтрагента		= НайтиДоговор(РеализацияУТ.ДоговорКонтрагента, НаклБух.Контрагент, );
	НаклБух.Комментарий 			= РеализацияУТ.Комментарий;
	НаклБух.КратностьВзаиморасчетов = 1;
	НаклБух.КурсВзаиморасчетов 		= 1;
	НаклБух.Склад 					= НайтиСклад(РеализацияУТ.Склад);//ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	НаклБух.Организация				= Организация;
	НаклБух.Ответственный			= Ответственный;
	НаклБух.Грузоотправитель		= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Организация.ИНН);
	НаклБух.Грузополучатель		= Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", РеализацияУТ.Грузополучатель.ИНН);
	
	//НаклБух.Грузополучатель		= НаклБух.Контрагент; //проверить в 10.3
	НаклБух.ОтражатьВУправленческомУчете=истина;
	НаклБух.ОтражатьВБухгалтерскомУчете=истина;
	НаклБух.ОтражатьВНалоговомУчете=истина;
	НаклБух.ВидПередачи=           Перечисления.ВидыПередачиТоваров.СоСклада;
	НаклБух.УчитыватьНДС			= РеализацияУТ.УчитыватьНДС;
	НаклБух.СуммаВключаетНДС		= РеализацияУТ.СуммаВключаетНДС;	
	НаклБух.СуммаДокумента			= РеализацияУТ.СуммаДокумента;
//	НаклБух.СпособЗачетаАвансов		= Перечисления.СпособыЗачетаАвансов.Автоматически;
	СФ_УТ							= НайтиСФ_В_УТ(РеализацияУТ.Ref, "Выданный");
	
	//НаклБух.ЗаполнитьСчетаУчетаРасчетов();
	
	ТоварыУТ = РеализацияУТ.Товары; //Цикл по ТЧ "Товары"
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Лев(Стр.Номенклатура.Наименование,50), Истина);
			//Если Не ТоварБух.Пустая() Тогда 
				//Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
				//	ТоварОбъект = ТоварБух.ПолучитьОбъект();
				//	Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
				//	ТоварОбъект.Код = Стр.Номенклатура.Код;
				//	ТоварОбъект.Записать();
				//	
				//	ТоварБух = ТоварОбъект.Ссылка;
				//КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		НовСтрока = НаклБух.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура 	= СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура 	= ТоварБух;
		КонецЕсли;
		
	//	НовСтрока.Субконто			= НовСтрока.Номенклатура.НоменклатурнаяГруппа;
		НовСтрока.ЕдиницаИзмерения 	= Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения);
	//	НовСтрока.ЕдиницаХраненияОстатков 	= НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		
		НовСтрока.Количество 		= Стр.Коэффициент*Стр.Количество;
		НовСтрока.Коэффициент 		= 1;
		НовСтрока.Цена 				= Стр.Цена/Стр.Коэффициент;
		НовСтрока.Сумма 			= Стр.Сумма;
//		НовСтрока.НомерГТД			= НайтиГТД(Стр.СерияНоменклатуры.НомерГТД.Код);
//		НовСтрока.СтранаПроисхождения = НайтиСтрану(Стр.СерияНоменклатуры.СтранаПроисхождения);
		
		Если НаклБух.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, НаклБух);
		КонецЕсли;
	КонецЦикла;
//	НаклБух.ЗаполнитьСчетаУчетаВТабЧасти(НаклБух.Товары, "Товары", Истина);
	
	//Цикл по услугам
	УслугиУТ = РеализацияУТ.Услуги;
	Для каждого стр из УслугиУТ Цикл
		УслугаБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
		НовСтрока = НаклБух.Услуги.Добавить();
		Если НЕ ЗначениеЗаполнено(УслугаБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = УслугаБух;
		КонецЕсли;
		
//		НовСтрока.Субконто			= НовСтрока.Номенклатура.НоменклатурнаяГруппа;
		НовСтрока.Количество 		= Стр.Количество;
		НовСтрока.Содержание 		= Стр.Содержание;
		НовСтрока.Цена 				= Стр.Цена;
		НовСтрока.Сумма 			= Стр.Сумма;
		
		Если НаклБух.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, НаклБух);
		КонецЕсли;
//	    НаклБух.ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НовСтрока, Истина)
	КонецЦикла;	
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			НаклБух.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			НаклБух.Записать(РежимЗаписиДокумента.Запись);
			НаклБух.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяРеализация) Тогда
			Сообщить("Изменен документ: """ + НаклБух.Номер + """ от: " + Формат(НаклБух.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + НаклБух.Номер + """ от: " + Формат(НаклБух.Дата, "ДЛФ=Д"));
		КонецЕсли;		
		
		Если СФ_УТ <> Неопределено Тогда 
			СоздатьСФ(СФ_УТ, НаклБух);
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьВозвратОтПокупателя(ВозвратУТ, ВозвратБУХ) Экспорт
	Если НЕ ВозвратБУХ.Пустая() тогда
		ВозвратБУХ = ВозвратБУХ.ПолучитьОбъект();
		ВозвратБУХ.Товары.Очистить();
	Иначе
		ВозвратБУХ = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ВозвратБУХ.Номер				= ВозвратУТ.Номер;
	КонецЕсли;
	
	ВозвратБУХ.Дата 					= ВозвратУТ.Дата;
	ЗаполнитьШапкуДокумента(ВозвратБУХ, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
	
	ВозвратБУХ.ВидОперации 				= Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия;
	ВозвратБУХ.Комментарий 				= ВозвратУТ.Комментарий;
	ВозвратБУХ.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ВозвратБУХ.Организация				= Организация;
	ВозвратБУХ.Ответственный			= Ответственный;
	ВозвратБУХ.УчитыватьНДС				= ВозвратУТ.УчитыватьНДС;
	ВозвратБУХ.СуммаВключаетНДС			= ВозвратУТ.СуммаВключаетНДС;
	ВозвратБУХ.КратностьВзаиморасчетов  = 1;
	ВозвратБУХ.КурсВзаиморасчетов		= 1;
	ВозвратБУХ.Контрагент				= НайтиКонтрагента(ВозвратУТ.Контрагент);
	ВозвратБУХ.ДоговорКонтрагента		= НайтиДоговор(ВозвратУТ.ДоговорКонтрагента, ВозвратБУХ.Контрагент, );
	ВозвратБУХ.ВалютаДокумента			= Константы.ВалютаРегламентированногоУчета.Получить();
	ВозвратБУХ.ПокупателемВыставляетсяСчетФактураНаВозврат = ВозвратУТ.ПокупателемВыставляетсяСчетФактураНаВозврат;
	ВозвратБУХ.ОтразитьВКнигеПокупок	= ВозвратУТ.ОтразитьВКнигеПокупок;
	ВозвратБУХ.СуммаДокумента			= ВозвратУТ.СуммаДокумента;
	
	ВозвратБУХ.ЗаполнитьСчетаУчетаРасчетов();
	
	ТоварыУТ = ВозвратУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ВозвратБУХ.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		// = НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		//НовСтрока. = 1;// т.к. переносим только базовые единицы измерения
		НовСтрока.Цена = Стр.Цена/стр.Коэффициент;
		НовСтрока.Сумма = Стр.Сумма;
		
		Если ЗначениеЗаполнено(Стр.Себестоимость) Тогда 
			НовСтрока.Себестоимость = Стр.Себестоимость;
		Иначе //Получим себестоимость из закупочной цены
			ТипЦенЗакупкаУТ = УТ.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");//Закупочная
			ЦенаЗакупки = УТ.Ценообразование.ПолучитьЦенуНоменклатуры(Стр.Номенклатура,,ТипЦенЗакупкаУТ, ВозвратУТ.Дата);
			НовСтрока.Себестоимость = Стр.Количество*стр.Коэффициент*ЦенаЗакупки;
		КонецЕсли;
		
		Если ВозвратБУХ.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ВозвратБУХ);
		КонецЕсли;
		
	КонецЦикла;
	ВозвратБУХ.ЗаполнитьСчетаУчетаВТабЧасти(ВозвратБУХ.Товары, "Товары", Истина);

	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ВозвратБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ВозвратБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + ВозвратБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + ВозвратБУХ.Номер);
		КонецЕсли;
		
		Если ВозвратБУХ.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда 
			СФ_УТ = НайтиСФ_В_УТ(ВозвратУТ.Ref, "Полученный");
			Если СФ_УТ <> Неопределено Тогда 
				СоздатьСФ(СФ_УТ, ВозвратБУХ, "Полученный");
			КонецЕсли;		
		КонецЕсли;
		
	Исключение 
		Сообщить("Пропущен документ возврат: " + ВозвратУТ.Номер);
	КонецПопытки;	
КонецПроцедуры
 
Процедура СоздатьСФ(СФ_УТ, НаклБух, Признак="Выданный")Экспорт
	
	Если Признак="Выданный" Тогда
		СФ_БУХ = Документы.СчетФактураВыданный.НайтиПоНомеру(СФ_УТ.Номер, СФ_УТ.Дата);
		Если НЕ СФ_БУХ.Пустая() Тогда
			СФ = СФ_БУХ.ПолучитьОбъект();
			СФ.ДокументыОснования.Очистить();
		Иначе
			СФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			СФ.Номер = СФ_УТ.Номер;
		КонецЕсли;
		
		СФ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(СФ_УТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
		СФ.Дата = СФ_УТ.Дата;
		//СФ.Заполнить(НаклБух.Ссылка);
		СФ.Организация = Организация;
		
		СФ.Контрагент = НаклБух.Ссылка.Контрагент;
		СФ.ДоговорКонтрагента = НаклБух.Ссылка.ДоговорКонтрагента;
		СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;

		СФ.ДокументыОснования.Добавить().ДокументОснование = НаклБух.Ссылка;
		СФ.ДокументОснование = НаклБух.Ссылка;
		СФ.ОпределениеПараметровСчетаФактуры();
		СФ.КодСпособаВыставления = 1;
		СФ.Выставлен = Истина;
		СФ.ДатаВыставления = СФ.Дата;
		
		Попытка
			
			Если НЕ ПроводитьДокументы Тогда
				СФ.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				СФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;		
			Сообщить("Записана С/Ф выданный: """ + СФ.Номер + """ от: " + Формат(СФ.Дата,"ДЛФ=Д"));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		//СФ_БУХ = Документы.СчетФактураПолученный.НайтиПоНомеру(СФ_УТ.Номер, СФ_УТ.Дата);
		//СФ_БУХ = УчетНДС.НайтиПодчиненныйСчетФактуру(НаклБух.Ссылка, "СчетФактураПолученный", );
		Если СФ_БУХ <> Неопределено Тогда
			СФ = СФ_БУХ.ПолучитьОбъект();
			СФ.ДокументыОснования.Очистить();
		Иначе
			СФ = Документы.СчетФактураПолученный.СоздатьДокумент();
			СФ.Номер = СФ_УТ.Номер;
		КонецЕсли;
		
		СФ.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду(СФ_УТ.ВалютаДокумента.Код);
		СФ.Дата = СФ_УТ.Дата;
		СФ.Организация = Организация;
		СФ.ДатаВходящегоДокумента = СФ_УТ.ДатаВходящегоДокумента;
		СФ.НомерВходящегоДокумента = СФ_УТ.НомерВходящегоДокумента;
		СФ.Контрагент = НаклБух.Ссылка.Контрагент;
		СФ.ДоговорКонтрагента = НаклБух.Ссылка.ДоговорКонтрагента;
		СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		//СФ.Заполнить(НаклБух.Ссылка);
		СФ.КодСпособаПолучения = 1; 
		СФ.ДокументыОснования.Добавить().ДокументОснование = НаклБух.Ссылка;
		СФ.ДокументОснование = НаклБух.Ссылка;
		ЗаполнитьШапкуДокументаПоОснованию(СФ, НаклБух.Ссылка);
		
		Если СФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс 
			//И УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, НаклБух.Дата) 
			Тогда
			СФ.НДСПредъявленКВычету = Истина;
		КонецЕсли;
		
		Попытка
			Если НЕ ПроводитьДокументы Тогда
				СФ.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				СФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			Сообщить("Записана С/Ф полученный: " + СФ.Номер + " от: " + Формат(СФ.Дата,"ДЛФ=Д"));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
  
Процедура СоздатьПКО(ПКОУТ, НайденныйПКО) Экспорт 
	
	Если ЗначениеЗаполнено(НайденныйПКО) Тогда
		НовыйПКО						= НайденныйПКО.ПолучитьОбъект();
		НовыйПКО.РасшифровкаПлатежа.Очистить();
	Иначе
		НовыйПКО    					= Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		НовыйПКО.Номер					= ПКОУТ.Номер;
	КонецЕсли;
	
	НовыйПКО.Дата 						= ПКОУТ.Дата;
	НовыйПКО.ВалютаДокумента 			= Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйПКО.ВидОперации 				= НайтиПеречисление(УТ.XMLString(ПКОУТ.ВидОперации), "ПКО");
	
	Если НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		НовыйПКО.Контрагент 			= НайтиКонтрагента(ПКОУТ.Контрагент);
		НовыйПКО.ДоговорКонтрагента		= НайтиДоговор(ПКОУТ.ДоговорКонтрагента, НовыйПКО.Контрагент, "Покупатель");
	ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица Тогда
		НовыйПКО.Контрагент 			= НайтиФизЛицо(ПКОУТ.Контрагент);
	ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		НовыйПКО.Контрагент 			= НайтиКонтрагента(ПКОУТ.Контрагент);
		НовыйПКО.ДоговорКонтрагента		= НайтиДоговор(ПКОУТ.ДоговорКонтрагента, НовыйПКО.Контрагент, "Поставщик");
	ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		НовыйПКО.Контрагент 			= НайтиРасчетныйСчет(ПКОУТ.СчетОрганизации, Организация);
		НовыйПКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда
		НовыйПКО.Контрагент 			= НайтиКонтрагента(ПКОУТ.Контрагент);
		НовыйПКО.ДоговорКонтрагента		= НайтиДоговор(ПКОУТ.ДоговорКонтрагента, НовыйПКО.Контрагент, "Прочее");
		НовыйПКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы;
	КонецЕсли;
	
	НовыйПКО.Комментарий 				= ПКОУТ.Комментарий;
	НовыйПКО.Организация				= Организация;
	НовыйПКО.Основание					= ПКОУТ.Основание;
	НовыйПКО.ПринятоОт					= ПКОУТ.ПринятоОт;
	НовыйПКО.Приложение					= ПКОУТ.Приложение;
	НовыйПКО.НомерЧекаККМ				= ПКОУТ.НомерЧекаККМ;
	НовыйПКО.СуммаДокумента				= ПКОУТ.СуммаДокумента;
	НовыйПКО.Ответственный				= Ответственный;
	НовыйПКО.СчетКасса					= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	
	Если ЗначениеЗаполнено(ПКОУТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
		НовыйПКО.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(ПКОУТ.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;

	РасшифровкаПлатежаУТ = ПКОУТ.РасшифровкаПлатежа;
	
	Для каждого Стр из РасшифровкаПлатежаУТ Цикл
		
		НовСтрока = НовыйПКО.РасшифровкаПлатежа.Добавить();
		
		НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
		НовСтрока.СуммаНДС 	= Стр.СуммаНДС;
		
		Если НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента= НайтиДоговор(Стр.ДоговорКонтрагента, НовыйПКО.Контрагент, "Покупатель");
			КонецЕсли;
		ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента= НайтиДоговор(Стр.ДоговорКонтрагента, НовыйПКО.Контрагент, "Поставщик");
			КонецЕсли;
		ИначеЕсли НовыйПКО.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам Тогда			
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента = НайтиДоговор(Стр.ДоговорКонтрагента, НовыйПКО.Контрагент, "Прочее");
				НовСтрока.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы;
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НовСтрока.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(Стр.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		НовСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		НовСтрока.КурсВзаиморасчетов 		= Стр.КурсВзаиморасчетов;
		НовСтрока.КратностьВзаиморасчетов 	= Стр.КратностьВзаиморасчетов;
		НовСтрока.СуммаПлатежа 				= Стр.СуммаПлатежа;
		НовСтрока.СуммаВзаиморасчетов = стр.СуммаВзаиморасчетов;
		
		ОпределитьСчетаУчетаРасчетовСКонтрагентом(НовыйПКО, НовСтрока, "ПоступлениеПКО");
		
	КонецЦикла;
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			НовыйПКО.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			НовыйПКО.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйПКО) Тогда
			Сообщить("Изменен документ: """ + НовыйПКО.Номер + """ от: " + Формат(НовыйПКО.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + НовыйПКО.Номер + """ от: " + Формат(НовыйПКО.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение
		Сообщить("Пропущен документ ПКО: """ + НовыйПКО.Номер + """ от: " + Формат(НовыйПКО.Дата, "ДЛФ=Д"));
	КонецПопытки;
КонецПроцедуры

Процедура СоздатьРКО(РКОУТ, НайденныйРКО) Экспорт
	
	Если ЗначениеЗаполнено(НайденныйРКО) Тогда
		НовыйРКО						= НайденныйРКО.ПолучитьОбъект();
		НовыйРКО.РасшифровкаПлатежа.Очистить();
	Иначе
		НовыйРКО    					= Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		НовыйРКО.Номер					= РКОУТ.Номер;
	КонецЕсли;
	
	НовыйРКО.Дата 						= РКОУТ.Дата;
	НовыйРКО.ВалютаДокумента 			= Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйРКО.ВидОперации 				= НайтиПеречисление(УТ.XMLString(РКОУТ.ВидОперации), "РКО");
	
	Если НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда 
		НовыйРКО.Контрагент             = НайтиФизЛицо(РКОУТ.Контрагент);
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;		
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		НовыйРКО.Контрагент 			= НайтиКонтрагента(РКОУТ.Контрагент);
		Если ЗначениеЗаполнено(РКОУТ.ДоговорКонтрагента.Код) Тогда
			НовыйРКО.ДоговорКонтрагента	= НайтиДоговор(РКОУТ.ДоговорКонтрагента, НовыйРКО.Контрагент, "Поставщик");
		КонецЕсли;
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		НовыйРКО.Контрагент 			= НайтиКонтрагента(РКОУТ.Контрагент);
		Если ЗначениеЗаполнено(РКОУТ.ДоговорКонтрагента.Код) Тогда
			НовыйРКО.ДоговорКонтрагента	= НайтиДоговор(РКОУТ.ДоговорКонтрагента, НовыйРКО.Контрагент, "Покупатель");
		КонецЕсли;
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		НовыйРКО.СчетОрганизации 		= НайтиРасчетныйСчет(РКОУТ.СчетОрганизации, Организация);
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
		НовыйРКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
		НовыйРКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
		//НовыйРКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		НовыйРКО.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
		//НовыйРКО.СчетОрганизации 		= НайтиРасчетныйСчет(РКОУТ.СчетОрганизации, Организация);
		НовыйРКО.Контрагент 			= НайтиКонтрагента(РКОУТ.Контрагент);
		Если ЗначениеЗаполнено(РКОУТ.ДоговорКонтрагента.Код) Тогда
			НовыйРКО.ДоговорКонтрагента	= НайтиДоговор(РКОУТ.ДоговорКонтрагента, НовыйРКО.Контрагент, "Прочее");
		КонецЕсли;
		НовыйРКО.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы;
	КонецЕсли;

	НовыйРКО.Комментарий 				= РКОУТ.Комментарий;
	НовыйРКО.Организация				= Организация;
	НовыйРКО.Основание					= РКОУТ.Основание;
	НовыйРКО.Приложение					= РКОУТ.Приложение;
	НовыйРКО.Выдать						= РКОУТ.Выдать;
	НовыйРКО.ПоДокументу				= РКОУТ.ПоДокументу;
	НовыйРКО.Основание					= РКОУТ.Основание;
	НовыйРКО.Приложение					= РКОУТ.Приложение;
	НовыйРКО.СуммаДокумента				= РКОУТ.СуммаДокумента;
	НовыйРКО.Ответственный				= Ответственный;
	
	Если ЗначениеЗаполнено(РКОУТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
		НовыйРКО.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(РКОУТ.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;

	РасшифровкаПлатежаУТ = РКОУТ.РасшифровкаПлатежа;
	
	Для каждого Стр из РасшифровкаПлатежаУТ Цикл
		
		НовСтрока = НовыйРКО.РасшифровкаПлатежа.Добавить();
		
		НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
		НовСтрока.СуммаНДС 	= Стр.СуммаНДС;
		
		Если НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента= НайтиДоговор(Стр.ДоговорКонтрагента, НовыйРКО.Контрагент, "Поставщик");
			КонецЕсли;
		ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
			Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента= НайтиДоговор(Стр.ДоговорКонтрагента, НовыйРКО.Контрагент, "Покупатель");
			КонецЕсли;
		ИначеЕсли НовыйРКО.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
			//НовыйРКО.Контрагент 			= НайтиКонтрагента(РКОУТ.Контрагент);
			Если ЗначениеЗаполнено(РКОУТ.ДоговорКонтрагента.Код) Тогда
				НовСтрока.ДоговорКонтрагента	= НайтиДоговор(РКОУТ.ДоговорКонтрагента, НовыйРКО.Контрагент, "Прочее");
			КонецЕсли;
			НовСтрока.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НовСтрока.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(Стр.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		НовСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		НовСтрока.КурсВзаиморасчетов 		= Стр.КурсВзаиморасчетов;
		НовСтрока.КратностьВзаиморасчетов 	= Стр.КратностьВзаиморасчетов;
		НовСтрока.СуммаПлатежа 				= Стр.СуммаПлатежа;
		НовСтрока.СуммаВзаиморасчетов 		= стр.СуммаВзаиморасчетов;
		
		ОпределитьСчетаУчетаРасчетовСКонтрагентом(НовыйРКО, НовСтрока, "СписаниеРКО");
		
	КонецЦикла;
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			НовыйРКО.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			НовыйРКО.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйРКО) Тогда
			Сообщить("Изменен документ: """ + НовыйРКО.Номер + """ от: " + Формат(НовыйРКО.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + НовыйРКО.Номер + """ от: " + Формат(НовыйРКО.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение
		Сообщить("Пропущен документ РКО: """ + НовыйРКО.Номер + """ от: " + Формат(НовыйРКО.Дата, "ДЛФ=Д"));
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьИсходящуюПлатежку(ППИ_УТ, НайденнаяПлатежка) Экспорт 
	
		Если ЗначениеЗаполнено(НайденнаяПлатежка) Тогда
			НоваяПлатежка = НайденнаяПлатежка.ПолучитьОбъект();
			НоваяПлатежка.РасшифровкаПлатежа.Очистить();
		Иначе
			
			СтрНомер = "РМ" + ПРАВ(ППИ_УТ.Номер, 6);
			//
			НоваяПлатежка 						= Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
			НоваяПлатежка.Номер					= СтрНомер;//ППИ_УТ.Номер;
		КонецЕсли;		

			
		
		НоваяПлатежка.Дата 				= ППИ_УТ.Дата;
		НоваяПлатежка.ДатаОплаты 		= ППИ_УТ.Дата;

		НоваяПлатежка.ВалютаДокумента 			= Справочники.Валюты.НайтиПоКоду(ППИ_УТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
	//	НоваяПлатежка.ВидОперации 				= НайтиПеречисление(УТ.XMLString(ППИ_УТ.ВидОперации), "ППИ");
		//ПредставлениеПеречисленияCOM = V8.String(ТекСтрока.Номенклатура.СтавкаНДС); //синоним
		НоваяПлатежка.ОтраженоВОперУчете=истина;
		НоваяПлатежка.ОтражатьВБухгалтерскомУчете=истина;
		НоваяПлатежка.ОтражатьВНалоговомУчете=истина;
		НоваяПлатежка.ОчередностьПлатежа		= ППИ_УТ.ОчередностьПлатежа;
		НоваяПлатежка.ВидПлатежа				= "Электронно";
		НоваяПлатежка.Оплачено                  = ППИ_УТ.Оплачено;


		НоваяПлатежка.Организация				= Организация;
		НоваяПлатежка.Ответственный 			= Ответственный;
		
		Если ЗначениеЗаполнено(ППИ_УТ.СчетОрганизации.НомерСчета) Тогда 
			НоваяПлатежка.СчетОрганизации		= НайтиРасчетныйСчет(ППИ_УТ.СчетОрганизации, Организация);//Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",ППИ_УТ.СчетОрганизации.НомерСчета,,Организация);//НайтиРСОрганизации(Организация, ППИ_УТ.СчетОрганизации.НомерСчета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ППИ_УТ.СчетКонтрагента.НомерСчета) Тогда 
			НоваяПлатежка.СчетКонтрагента		= НайтиРасчетныйСчет(ППИ_УТ.СчетКонтрагента, НоваяПлатежка.Контрагент);//Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",ППИ_УТ.СчетКонтрагента.НомерСчета);
		Иначе
			НоваяПлатежка.СчетКонтрагента 		= НоваяПлатежка.Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		НоваяПлатежка.Контрагент 				= НайтиКонтрагента(ППИ_УТ.Контрагент);
		НоваяПлатежка.ИННПлательщика			= Организация.ИНН;
		НоваяПлатежка.КПППлательщика			= Организация.КПП;
		
		НоваяПлатежка.ИННПолучателя				= НоваяПлатежка.Контрагент.ИНН;
		НоваяПлатежка.КПППолучателя				= НоваяПлатежка.Контрагент.КПП;

		//Если НоваяПлатежка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймам Тогда
		//	НоваяПлатежка.ДоговорКонтрагента	= НайтиДоговор(ППИ_УТ.ДоговорКонтрагента, НоваяПлатежка.Контрагент, "Прочее");	
		//Иначе
		    Если не ППИ_УТ.ПеречислениеВБюджет   Тогда
			НоваяПлатежка.ДоговорКонтрагента	= НайтиДоговор(ППИ_УТ.ДоговорКонтрагента, НоваяПлатежка.Контрагент, "Поставщик");
			
			КонецЕсли;
		
//		Если НоваяПлатежка.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписание тогда
			//СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			//НоваяПлатежка.Организация, НоваяПлатежка.Контрагент, НоваяПлатежка.ДоговорКонтрагента);
			//НоваяПлатежка.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			
			//НоваяПлатежка.СубконтоДт1 = 
//		КонецЕсли;

		
		НоваяПлатежка.НазначениеПлатежа			= ППИ_УТ.НазначениеПлатежа;//СтрЗаменить(ППИ_УТ.НазначениеПлатежа, Символы.ПС, " ");
		НоваяПлатежка.Комментарий				= ППИ_УТ.Комментарий;
		НоваяПлатежка.СуммаДокумента			= ППИ_УТ.СуммаДокумента;
		Если ЗначениеЗаполнено(ППИ_УТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НоваяПлатежка.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(ППИ_УТ.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(ППИ_УТ.СчетОрганизации.НомерСчета) Тогда 
		//	НоваяПлатежка.СчетОрганизации		= НайтиРасчетныйСчет(ППИ_УТ.СчетОрганизации, Организация);//Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",ППИ_УТ.СчетОрганизации.НомерСчета,,Организация);//НайтиРСОрганизации(Организация, ППИ_УТ.СчетОрганизации.НомерСчета);
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ППИ_УТ.СчетКонтрагента.НомерСчета) Тогда 
		//	НоваяПлатежка.СчетКонтрагента		= НайтиРасчетныйСчет(ППИ_УТ.СчетКонтрагента, НоваяПлатежка.Контрагент);//Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",ППИ_УТ.СчетКонтрагента.НомерСчета);
		//КонецЕсли;
		
		
		//УчетнаяПолитика = ПолучитьПараметрыУчетнойПолитики(ТекущаяДата(), Ложь, Организация,Ложь);
		
		//Если УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда 
		//	НоваяПлатежка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//КонецЕсли;
		//НоваяПлатежка.ПересчитатьСуммуНДС();

			
			НовСтрока = НоваяПлатежка.РасшифровкаПлатежа.Добавить();
			Если ППИ_УТ.СуммаНДС <> 0 тогда
				НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(ППИ_УТ.СтавкаНДС), "НДС");
				НовСтрока.СуммаНДС 	= ППИ_УТ.СуммаНДС;
			Иначе
				НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			    НовСтрока.СуммаПлатежа = ППИ_УТ.СуммаДокумента;;

			
			НовСтрока.ДоговорКонтрагента 		= НоваяПлатежка.ДоговорКонтрагента;
			Если ЗначениеЗаполнено(ППИ_УТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
				НовСтрока.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(ППИ_УТ.СтатьяДвиженияДенежныхСредств);
			КонецЕсли;
			
			ОпределитьСчетаУчетаРасчетовСКонтрагентом(НоваяПлатежка, НовСтрока, "СписаниеППИ");
			 		
		Если ЗначениеЗаполнено(ППИ_УТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НоваяПлатежка.СтатьяДвиженияДенежныхСредств	= НайтиСтатьюДвиженияДенСредств(ППИ_УТ.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;

		
		Попытка
			Если НЕ ПроводитьДокументы Тогда
				НоваяПлатежка.Записать(РежимЗаписиДокумента.Запись);
			Иначе 
				НоваяПлатежка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденнаяПлатежка) Тогда
				Сообщить("Изменен документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
			Иначе
				Сообщить("Создан документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
			КонецЕсли;
			
		Исключение
			Сообщить("Пропущен документ плтежка: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
		КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьВходящуюПлатежку(ППВ_УТ, НайденнаяПлатежка)Экспорт 
	Если ЗначениеЗаполнено(НайденнаяПлатежка) Тогда
		НоваяПлатежка						= НайденнаяПлатежка.ПолучитьОбъект();
		НоваяПлатежка.РасшифровкаПлатежа.Очистить();
	Иначе
		СтрНомер = "РМ" + ПРАВ(ППВ_УТ.Номер, 6);
		НоваяПлатежка 						= Документы.ПлатежноеПоручениеВходящее.СоздатьДокумент();
		НоваяПлатежка.Номер					= СтрНомер;
	КонецЕсли;
	
	НоваяПлатежка.Дата 						= ППВ_УТ.Дата;
	НоваяПлатежка.ДатаОплаты 				= ППВ_УТ.Дата;
	
	НоваяПлатежка.ВалютаДокумента 			= Справочники.Валюты.НайтиПоКоду(ППВ_УТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
	//НоваяПлатежка.ВидОперации 				= НайтиПеречисление(УТ.XMLString(ППВ_УТ.ВидОперации), "ППВ");
	НоваяПлатежка.НомерВходящегоДокумента 	= ППВ_УТ.НомерВходящегоДокумента;
	НоваяПлатежка.ДатаВходящегоДокумента	= ППВ_УТ.ДатаВходящегоДокумента;
	НоваяПлатежка.ОтраженоВОперУчете=истина;
	НоваяПлатежка.ОтражатьВБухгалтерскомУчете=истина;
	НоваяПлатежка.ОтражатьВНалоговомУчете=истина;
	НоваяПлатежка.Оплачено                  = истина;

	
	
	НоваяПлатежка.Контрагент 				= НайтиКонтрагента(ППВ_УТ.Контрагент);
	
	Если ЗначениеЗаполнено(ППВ_УТ.ДоговорКонтрагента.Код) Тогда //Договора может и не быть
		НоваяПлатежка.ДоговорКонтрагента	= НайтиДоговор(ППВ_УТ.ДоговорКонтрагента, НоваяПлатежка.Контрагент, "Покупатель");
	КонецЕсли;
	
	НоваяПлатежка.НазначениеПлатежа			= ППВ_УТ.НазначениеПлатежа;//СтрЗаменить(ППИ_УТ.НазначениеПлатежа, Символы.ПС, " ");
	НоваяПлатежка.Комментарий 				= ППВ_УТ.Комментарий;
	НоваяПлатежка.Организация				= Организация;
	НоваяПлатежка.СуммаДокумента			= ППВ_УТ.СуммаДокумента;
//	НоваяПлатежка.СчетБанк 					= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
	Если ЗначениеЗаполнено(ППВ_УТ.СчетОрганизации.НомерСчета) Тогда
		НоваяПлатежка.СчетОрганизации		= НайтиРасчетныйСчет(ППВ_УТ.СчетОрганизации, Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ППВ_УТ.СчетКонтрагента.НомерСчета) Тогда
		НоваяПлатежка.СчетКонтрагента		= НайтиРасчетныйСчет(ППВ_УТ.СчетКонтрагента, НоваяПлатежка.Контрагент);
	КонецЕсли;
	
	НоваяПлатежка.Ответственный 			= Ответственный;
	
	//СчетаУчета	 						= УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, НоваяПлатежка.Контрагент, НоваяПлатежка.ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ППВ_УТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
		НоваяПлатежка.СтатьяДвиженияДенежныхСредств = НайтиСтатьюДвиженияДенСредств(ППВ_УТ.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	РасшифровкаПлатежаУТ = ППВ_УТ.РасшифровкаПлатежа;
	
	Для каждого Стр из РасшифровкаПлатежаУТ Цикл
		
		НовСтрока = НоваяПлатежка.РасшифровкаПлатежа.Добавить();
		Если Стр.СуммаНДС <> 0 тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");//Перечисления.СтавкиНДС.НДС18;
			НовСтрока.СуммаНДС 	= Стр.СуммаНДС;
		Иначе
			НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
			НовСтрока.ДоговорКонтрагента 	= НайтиДоговор(Стр.ДоговорКонтрагента, НоваяПлатежка.Контрагент, "Покупатель");;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НовСтрока.СтатьяДвиженияДенежныхСредств = НайтиСтатьюДвиженияДенСредств(Стр.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
//		НовСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
//		НовСтрока.КурсВзаиморасчетов 		= Стр.КурсВзаиморасчетов;
//		НовСтрока.КратностьВзаиморасчетов 	= Стр.КратностьВзаиморасчетов;
		НовСтрока.СуммаПлатежа 				= Стр.СуммаПлатежа;
		НовСтрока.СуммаВзаиморасчетов 		= Стр.СуммаВзаиморасчетов;
		
		//Если НовСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда 
		//	ЗапросУт.УстановитьПараметр("Сделка",стр.Сделка.ссылка);
		//	Результат = ЗапросУт.Выполнить().Выбрать();
		//	Пока Результат.Следующий() Цикл 
		//		Сделка = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Результат.Ref.Number,Результат.Ref.Date).Ссылка;
		//		НовСтрока.Сделка = Сделка;
		//	КонецЦикла;
		//КонецЕсли;
		ОпределитьСчетаУчетаРасчетовСКонтрагентом(НоваяПлатежка, НовСтрока, "ПоступлениеППВ");
		
	КонецЦикла;
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			НоваяПлатежка.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			НоваяПлатежка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяПлатежка) Тогда
			Сообщить("Изменен документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение
		Сообщить("Пропущен документ платежка3: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОрдерСписание (СП_УТ, НайденныйОрдер)Экспорт 
	Если ЗначениеЗаполнено(НайденныйОрдер) Тогда
		НоваяПлатежка		= НайденныйОрдер.ПолучитьОбъект();
		НоваяПлатежка.РасшифровкаПлатежа.Очистить();
	Иначе
		СтрНомер = "РМ" + ПРАВ(СП_УТ.Номер, 6);
		НоваяПлатежка 						= Документы.ПлатежныйОрдерСписаниеДенежныхСредств.СоздатьДокумент();
		НоваяПлатежка.Номер					= СтрНомер;
	КонецЕсли;
	
	НоваяПлатежка.Дата 						= СП_УТ.Дата;
	НоваяПлатежка.ДатаОплаты 				= СП_УТ.Дата;
	
	НоваяПлатежка.ВалютаДокумента 			= Справочники.Валюты.НайтиПоКоду(СП_УТ.ВалютаДокумента.Код);//Константы.ВалютаРегламентированногоУчета.Получить();
	НоваяПлатежка.ВидОперации 				= Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;;
	//НоваяПлатежка.НомерВходящегоДокумента 	= СП_УТ.НомерВходящегоДокумента;
//	НоваяПлатежка.ДатаВходящегоДокумента	= СП_УТ.ДатаВходящегоДокумента;
	НоваяПлатежка.ОтраженоВОперУчете=истина;
	НоваяПлатежка.ОтражатьВБухгалтерскомУчете=истина;
	НоваяПлатежка.ОтражатьВНалоговомУчете=истина;
	НоваяПлатежка.Оплачено                  = истина;

	
	
	НоваяПлатежка.Контрагент 				= НайтиКонтрагента(СП_УТ.Контрагент);
	
	Если ЗначениеЗаполнено(СП_УТ.ДоговорКонтрагента.Код) Тогда //Договора может и не быть
		НоваяПлатежка.ДоговорКонтрагента	= НайтиДоговор(СП_УТ.ДоговорКонтрагента, НайденныйОрдер.Контрагент, "Покупатель");
	КонецЕсли;
	
//	НоваяПлатежка.НазначениеПлатежа			= СП_УТ.НазначениеПлатежа;//СтрЗаменить(ППИ_УТ.НазначениеПлатежа, Символы.ПС, " ");
//	НоваяПлатежка.Комментарий 				= СП_УТ.Комментарий;
	НоваяПлатежка.Организация				= Организация;
	НоваяПлатежка.СуммаДокумента			= СП_УТ.СуммаДокумента;
//	НоваяПлатежка.СчетБанк 					= ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
	Если ЗначениеЗаполнено(СП_УТ.СчетОрганизации.НомерСчета) Тогда
		НоваяПлатежка.СчетОрганизации		= НайтиРасчетныйСчет(СП_УТ.СчетОрганизации, Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СП_УТ.СчетКонтрагента.НомерСчета) Тогда
		НоваяПлатежка.СчетКонтрагента		= НайтиРасчетныйСчет(СП_УТ.СчетКонтрагента, НайденныйОрдер.Контрагент);
	КонецЕсли;
	
	НоваяПлатежка.Ответственный 			= Ответственный;
	
	//СчетаУчета	 						= УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, НоваяПлатежка.Контрагент, НоваяПлатежка.ДоговорКонтрагента);
	Если ЗначениеЗаполнено(СП_УТ.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
		НоваяПлатежка.СтатьяДвиженияДенежныхСредств = НайтиСтатьюДвиженияДенСредств(СП_УТ.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	РасшифровкаПлатежаУТ = СП_УТ.РасшифровкаПлатежа;
	
	Для каждого Стр из РасшифровкаПлатежаУТ Цикл
		
		НовСтрока = НоваяПлатежка.РасшифровкаПлатежа.Добавить();
		Если Стр.СуммаНДС <> 0 тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");//Перечисления.СтавкиНДС.НДС18;
			НовСтрока.СуммаНДС 	= Стр.СуммаНДС;
		Иначе
			НовСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента.Код) Тогда
			НовСтрока.ДоговорКонтрагента 	= НайтиДоговор(Стр.ДоговорКонтрагента, НайденныйОрдер.Контрагент, "Покупатель");;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.СтатьяДвиженияДенежныхСредств.Наименование) Тогда
			НовСтрока.СтатьяДвиженияДенежныхСредств = НайтиСтатьюДвиженияДенСредств(Стр.СтатьяДвиженияДенежныхСредств);
		КонецЕсли;
		
		НовСтрока.СуммаПлатежа 				= Стр.СуммаПлатежа;
		НовСтрока.СуммаВзаиморасчетов 		= Стр.СуммаВзаиморасчетов;
		
		//Если НовСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда 
		//	ЗапросУт.УстановитьПараметр("Сделка",стр.Сделка.ссылка);
		//	Результат = ЗапросУт.Выполнить().Выбрать();
		//	Пока Результат.Следующий() Цикл 
		//		Сделка = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Результат.Ref.Number,Результат.Ref.Date).Ссылка;
		//		НовСтрока.Сделка = Сделка;
		//	КонецЦикла;
		//КонецЕсли;
		ОпределитьСчетаУчетаРасчетовСКонтрагентом(НоваяПлатежка, НовСтрока, "ПоступлениеППВ");
		
	КонецЦикла;
	
//	Попытка
		Если НЕ ПроводитьДокументы Тогда
			НоваяПлатежка.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			НоваяПлатежка.Записать(РежимЗаписиДокумента.Запись);
			НоваяПлатежка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйОрдер) Тогда
			Сообщить("Изменен документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + НоваяПлатежка.Номер + """ от: " + Формат(НоваяПлатежка.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
//	Исключение
//		Сообщить("Пропущен документ платежка3: """ + НайденныйОрдер.Номер + """ от: " + Формат(НайденныйОрдер.Дата, "ДЛФ=Д"));
//	КонецПопытки;
	
КонецПроцедуры




Процедура СоздатьАвОтчет(АвОтчетУТ, НайденныйАвОтчет) Экспорт 
	Если ЗначениеЗаполнено(НайденныйАвОтчет) Тогда
		АвОтчет				= НайденныйАвОтчет.ПолучитьОбъект();
		АвОтчет.ВыданныеАвансы.Очистить();
		АвОтчет.Товары.Очистить();
		АвОтчет.Прочее.Очистить();
		АвОтчет.ОплатаПоставщикам.Очистить();
	Иначе
		АвОтчет 			= Документы.АвансовыйОтчет.СоздатьДокумент();
		АвОтчет.Номер		= АвОтчетУТ.Номер;
	КонецЕсли;
	
	АвОтчет.Дата			= АвОтчетУТ.Дата;
	АвОтчет.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	АвОтчет.КоличествоДокументов = АвОтчетУТ.КоличествоДокументов;
	АвОтчет.КоличествоЛистов= АвОтчетУТ.КоличествоЛистов;
	АвОтчет.Организация		= Организация;
	АвОтчет.Ответственный	= Ответственный;
	АвОтчет.КратностьДокумента = АвОтчетУТ.КратностьДокумента;
	АвОтчет.КурсДокумента	= АвОтчет.КурсДокумента;
	АвОтчет.Склад			= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	АвОтчет.СуммаВключаетНДС= АвОтчетУТ.СуммаВключаетНДС;
	АвОтчет.СуммаДокумента	= АвОтчетУТ.СуммаДокумента;
	АвОтчет.УчитыватьНДС	= АвОтчетУТ.УчитыватьНДС;
	АвОтчет.НДСВключенВСтоимость = АвОтчет.НДСВключенВСтоимость;
	АвОтчет.НазначениеАванса= АвОтчетУТ.НазначениеАванса;
	АвОтчет.ФизЛицо         = НайтиФизЛицо(АвОтчетУТ.ФизЛицо);
	
	ВыданныеАвансыУТ = АвОтчетУТ.ВыданныеАвансы;
	Для Каждого Стр Из ВыданныеАвансыУТ Цикл
		НовСтр = АвОтчет.ВыданныеАвансы.Добавить();
		НовСтр.Сумма = Стр.Сумма;
		НовСтр.ДокументАванса = Документы.РасходныйКассовыйОрдер.НайтиПоНомеру(Стр.ДокументАванса.Номер, Стр.ДокументАванса.Дата);
	КонецЦикла;
	
	ТоварыУТ = АвОтчетУТ.Товары;
	Для Каждого Стр Из ТоварыУТ Цикл
		НовСтр = АвОтчет.Товары.Добавить();
		НовСтр.ВидДокВходящий		= Стр.ВидДокВходящий;
		НовСтр.НомерВходящегоДокумента = Стр.НомерВходящегоДокумента;
		НовСтр.ДатаВходящегоДокумента = Стр.ДатаВходящегоДокумента;
		
		НовСтр.Количество			= Стр.Количество;
		НовСтр.Поставщик			= НайтиКонтрагента(Стр.Поставщик);
		
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтр.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтр.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтр.ПредъявленСФ			= Стр.ПредъявленСФ;
		
		Если Стр.ПредъявленСФ Тогда
			НовСтр.НомерСФ			= Стр.НомерСФ;
			НовСтр.ДатаСФ			= Стр.ДатаСФ;
			НовСтр.СчетФактура		= Документы.СчетФактураПолученный.НайтиПоНомеру(Стр.СчетФактура.Номер, Стр.СчетФактура.Дата);
		КонецЕсли;
		
		НовСтр.Цена					= Стр.Цена;
		НовСтр.Сумма				= Стр.Сумма;
		НовСтр.СтавкаНДС			= НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
		НовСтр.СуммаНДС				= Стр.СуммаНДС;
		АвОтчет.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НовСтр, "Товары", Истина, Истина);
	КонецЦикла;
	
	ПрочееУТ = АвОтчетУТ.Прочее;
	Для Каждого Стр Из ПрочееУТ Цикл
		НовСтр = АвОтчет.Прочее.Добавить();
		НовСтр.ВидДокВходящий		= Стр.ВидДокВходящий;
		НовСтр.НомерВходящегоДокумента = Стр.НомерВходящегоДокумента;
		НовСтр.ДатаВходящегоДокумента = Стр.ДатаВходящегоДокумента;
		НовСтр.Содержание			= Стр.Содержание;
		
		Если ЗначениеЗаполнено(Стр.Поставщик.Наименование) Тогда
			НовСтр.Поставщик		= НайтиКонтрагента(Стр.Поставщик);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.Номенклатура.Код) Тогда 
			ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Стр.Номенклатура.Код);
			Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
				НовСтр.Номенклатура = СоздатьТовар(Стр.Номенклатура);
			Иначе
				НовСтр.Номенклатура = ТоварБух;
			КонецЕсли;		
		КонецЕсли;
		
		НовСтр.ПредъявленСФ			= Стр.ПредъявленСФ;
		
		Если Стр.ПредъявленСФ Тогда
			НовСтр.НомерСФ			= Стр.НомерСФ;
			НовСтр.ДатаСФ			= Стр.ДатаСФ;
			НовСтр.СчетФактура		= Документы.СчетФактураПолученный.НайтиПоНомеру(Стр.СчетФактура.Номер, Стр.СчетФактура.Дата);
		КонецЕсли;
		
		НовСтр.Сумма				= Стр.Сумма;
		НовСтр.СтавкаНДС			= НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
		НовСтр.СуммаНДС				= Стр.СуммаНДС;
		АвОтчет.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НовСтр, "Прочее", Истина, Истина);
	КонецЦикла;
	
	
	ОплатыУТ = АвОтчетУТ.ОплатаПоставщикам;
	Для Каждого Стр Из ОплатыУТ Цикл
		НовСтр = АвОтчет.ОплатаПоставщикам.Добавить();
		НовСтр.ВидДокВходящий		= Стр.ВидДокВходящий;
		НовСтр.НомерВходящегоДокумента = Стр.НомерВходящегоДокумента;
		НовСтр.ДатаВходящегоДокумента = Стр.ДатаВходящегоДокумента;
		НовСтр.Содержание			= Стр.Содержание;
		НовСтр.КурсВзаиморасчетов	= 1;
		НовСтр.КратностьВзаиморасчетов = 1;
		
		Если ЗначениеЗаполнено(Стр.Контрагент.Наименование) Тогда
			НовСтр.Контрагент		= НайтиКонтрагента(Стр.Контрагент);
			НовСтр.ДоговорКонтрагента =  НайтиДоговор(Стр.ДоговорКонтрагента, НовСтр.Контрагент, "Поставщик");
		КонецЕсли;
	
		НовСтр.Сумма				= Стр.Сумма;
		НовСтр.СуммаВзаиморасчетов	= Стр.Сумма;
		
		ОпределитьСчетаУчетаРасчетовСКонтрагентом(АвОтчет, НовСтр, "АвОтчет");
	
	КонецЦикла;
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			АвОтчет.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			АвОтчет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденныйАвОтчет) Тогда
			Сообщить("Изменен документ: """ + АвОтчет.Номер + """ от: " + Формат(АвОтчет.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + АвОтчет.Номер + """ от: " + Формат(АвОтчет.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение
		Сообщить("Пропущен документ авотчет: """ + АвОтчет.Номер + """ от: " + Формат(АвОтчет.Дата, "ДЛФ=Д"));
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьСписание(СписаниеУТ, Списание) Экспорт
	
	Если НЕ Списание.Пустая() тогда
		СписаниеБУХ = Списание.ПолучитьОбъект();
		СписаниеБУХ.Товары.Очистить();
	Иначе
		СписаниеБух = Документы.СписаниеТоваров.СоздатьДокумент();
		СписаниеБух.Номер				= СписаниеУТ.Номер;
	КонецЕсли;
	
	СписаниеБух.Дата 					= СписаниеУТ.Дата;
	ЗаполнитьШапкуДокумента(СписаниеБух, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
	
	СписаниеБух.ВидОперации 			= Перечисления.ВидыОперацийСписаниеТоваров.ТоварыПродукция;
	СписаниеБух.Комментарий 			= СписаниеУТ.Комментарий;
	СписаниеБух.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	СписаниеБух.Организация				= Организация;
	СписаниеБух.Ответственный			= Ответственный;
	
	ТоварыУТ = СписаниеУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = СписаниеБух.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмерения = НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		НовСтрока.Коэффициент = 1;// т.к. переносим только базовые единицы измерения
		НовСтрока.Цена = Стр.Цена/стр.Коэффициент;
		НовСтрока.Сумма = Стр.Сумма;
		
	КонецЦикла;
	СписаниеБух.ЗаполнитьСчетаУчетаВТабЧасти(СписаниеБух.Товары, "Товары", Истина);

	Попытка
		Если НЕ ПроводитьДокументы Тогда
			СписаниеБух.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			СписаниеБух.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Списание) Тогда
			Сообщить("Изменен документ: """ + СписаниеБух.Номер + """ от: " + Формат(СписаниеБух.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + СписаниеБух.Номер + """ от: " + Формат(СписаниеБух.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение 
		Сообщить("Пропущен документ списание: """ + СписаниеУТ.Номер + """ от: " + Формат(СписаниеУТ.Дата, "ДЛФ=Д"));
	КонецПопытки;	
		
КонецПроцедуры

Процедура СоздатьОприходование(ОприходованиеУТ, Оприходование) Экспорт
	
	Если НЕ Оприходование.Пустая() тогда
		ОприходованиеБУХ = Оприходование.ПолучитьОбъект();
		ОприходованиеБУХ.Товары.Очистить();
	Иначе
		ОприходованиеБух = Документы.ОприходованиеТоваров.СоздатьДокумент();
		ОприходованиеБух.Номер				= ОприходованиеУТ.Номер;
	КонецЕсли;
	
	ОприходованиеБух.Дата 					= ОприходованиеУТ.Дата;
	ЗаполнитьШапкуДокумента(ОприходованиеБух, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(),);
	
	ОприходованиеБух.Комментарий 			= ОприходованиеУТ.Комментарий;
	ОприходованиеБух.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ОприходованиеБух.Организация			= Организация;
	ОприходованиеБух.Ответственный			= Ответственный;
	ОприходованиеБух.СтатьяПрочихДоходовРасходов = СтатьяДоходовОприходование;
	
	ТоварыУТ = ОприходованиеУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ОприходованиеБух.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмерения = НовСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		НовСтрока.Коэффициент = 1;// т.к. переносим только базовые единицы измерения
		НовСтрока.Цена = Стр.Цена/стр.Коэффициент;
		НовСтрока.Сумма = Стр.Сумма;
		
	КонецЦикла;
	ОприходованиеБух.ЗаполнитьСчетаУчетаВТабЧасти(ОприходованиеБух.Товары, Истина);

	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ОприходованиеБух.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ОприходованиеБух.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Оприходование) Тогда
			Сообщить("Изменен документ: """ + ОприходованиеБух.Номер + """ от: " + Формат(ОприходованиеБух.Дата, "ДЛФ=Д"));
		Иначе
			Сообщить("Создан документ: """ + ОприходованиеБух.Номер + """ от: " + Формат(ОприходованиеБух.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	Исключение 
		Сообщить("Пропущен документ оприходование: """ + ОприходованиеУТ.Номер + """ от: " + Формат(ОприходованиеУТ.Дата, "ДЛФ=Д"));
	КонецПопытки;	
		
КонецПроцедуры

Процедура СоздатьВозвратТоваровПоставщику(ВозвратУТ, ВозвратБУХ) Экспорт
	Если НЕ ВозвратБУХ.Пустая() тогда
		ВозвратБУХ = ВозвратБУХ.ПолучитьОбъект();
		ВозвратБУХ.Товары.Очистить();
	Иначе
		ВозвратБУХ = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
		ВозвратБУХ.Номер				= ВозвратУТ.Номер;
	КонецЕсли;
	
	ВозвратБУХ.Дата 					= ВозвратУТ.Дата;
	ЗаполнитьШапкуДокумента(ВозвратБУХ, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
	
	ВозвратБУХ.ВидОперации 				= Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	ВозвратБУХ.Комментарий 				= ВозвратУТ.Комментарий;
	ВозвратБУХ.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ВозвратБУХ.Организация				= Организация;
	ВозвратБУХ.Ответственный			= Ответственный;
	ВозвратБУХ.УчитыватьНДС				= ВозвратУТ.УчитыватьНДС;
	ВозвратБУХ.СуммаВключаетНДС			= ВозвратУТ.СуммаВключаетНДС;
	ВозвратБУХ.КратностьВзаиморасчетов  = 1;
	ВозвратБУХ.КурсВзаиморасчетов		= 1;
	ВозвратБУХ.Контрагент				= НайтиКонтрагента(ВозвратУТ.Контрагент);
	ВозвратБУХ.ДоговорКонтрагента		= НайтиДоговор(ВозвратУТ.ДоговорКонтрагента, ВозвратБУХ.Контрагент, );
	ВозвратБУХ.ВалютаДокумента			= Константы.ВалютаРегламентированногоУчета.Получить();
	ВозвратБУХ.ЗаполнитьСчетаУчетаРасчетов();
	ВозвратБУХ.СтатьяДоходовИРасходов	= Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
	ВозвратБУХ.ПоставщикуВыставляетсяСчетФактураНаВозврат = Истина;
	
	СФ_УТ								= НайтиСФ_В_УТ(ВозвратУТ.Ref, "Выданный");
	
	ТоварыУТ = ВозвратУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			Если Не ТоварБух.Пустая() Тогда 
				Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
					ТоварОбъект = ТоварБух.ПолучитьОбъект();
					Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
					ТоварОбъект.Код = Стр.Номенклатура.Код;
					ТоварОбъект.Записать();
					
					ТоварБух = ТоварОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ВозвратБУХ.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		//НовСтрока. = 1;// т.к. переносим только базовые единицы измерения
		НовСтрока.Цена = Стр.Цена/стр.Коэффициент;
		НовСтрока.Сумма = Стр.Сумма;
		
		Если ВозвратБУХ.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ВозвратБУХ);
		КонецЕсли;
		
	КонецЦикла;
	ВозвратБУХ.ЗаполнитьСчетаУчетаВТабЧасти(ВозвратБУХ.Товары, "Товары", Истина);

	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ВозвратБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ВозвратБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + ВозвратБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + ВозвратБУХ.Номер);
		КонецЕсли;
		
		Если СФ_УТ <> Неопределено Тогда 
			СоздатьСФ(СФ_УТ, ВозвратБУХ);
		КонецЕсли;		
		
	Исключение 
		Сообщить("Пропущен документ возврат: " + ВозвратУТ.Номер);
	КонецПопытки;	
КонецПроцедуры
 
Процедура СоздатьКомплектацию(КомплектУТ, КомплектБУХ) Экспорт
	
	Если НЕ КомплектБУХ.Пустая() тогда
		КомплектБУХ = КомплектБУХ.ПолучитьОбъект();
		КомплектБУХ.Комплектующие.Очистить();
	Иначе
		КомплектБУХ = Документы.КомплектацияНоменклатуры.СоздатьДокумент();
		КомплектБУХ.Номер				= КомплектУТ.Номер;
	КонецЕсли;
	
	КомплектБУХ.Дата 					= КомплектУТ.Дата;
	КомплектБУХ.ВидОперации				= НайтиПеречисление(УТ.XMLString(КомплектУТ.ВидОперации), "Комплектация");//Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
	ЗаполнитьШапкуДокумента(КомплектБУХ, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(),);
	
	КомплектБУХ.Комментарий 			= КомплектУТ.Комментарий;
	КомплектБУХ.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	КомплектБУХ.Организация				= Организация;
	КомплектБУХ.Ответственный			= Ответственный;
	КомплектБУХ.НДСвСтоимостиТоваров	= НайтиПеречисление(УТ.XMLString(КомплектУТ.НДСвСтоимостиТоваров), "НДСВСтоимости");
	
	ТоварБух = Справочники.Номенклатура.НайтиПоКоду(КомплектУТ.Номенклатура.Код);
	Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
		ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(КомплектУТ.Номенклатура.Наименование, Истина);
		Если Не ТоварБух.Пустая() Тогда 
			Если ТоварБух.Код <>  КомплектУТ.Номенклатура.Код Тогда
				ТоварОбъект = ТоварБух.ПолучитьОбъект();
				Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(КомплектУТ.Номенклатура.Код));
				ТоварОбъект.Код = КомплектУТ.Номенклатура.Код;
				ТоварОбъект.Записать();
				ТоварБух = ТоварОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КомплектБУХ.Номенклатура			= ТоварБух;
	КомплектБУХ.Количество				= КомплектУТ.Количество;
	КомплектБУХ.СчетСписанияНДС 		= ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
	//СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, КомплектБУХ.Номенклатура, КомплектБУХ.Склад);
	//КомплектБУХ.СчетУчета = СчетаУчета.СчетУчета;
	
	КомплектующиеУТ = КомплектУТ.Комплектующие; //Цикл по ТЧ.Комплектующие
	Для каждого Стр из КомплектующиеУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			Если Не ТоварБух.Пустая() Тогда 
				Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
					ТоварОбъект = ТоварБух.ПолучитьОбъект();
					Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
					ТоварОбъект.Код = Стр.Номенклатура.Код;
					ТоварОбъект.Записать();
					
					ТоварБух = ТоварОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		НовСтрока = КомплектБУХ.Комплектующие.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		//НовСтрока.Сумма = Стр.Сумма;
		НовСтрока.ДоляСтоимости = Стр.ДоляСтоимости;
		НовСтрока.НомерГТД = НайтиГТД(Стр.СерияНоменклатуры.НомерГТД.Код);
		НовСтрока.СтранаПроисхождения = НайтиСтрану(Стр.СерияНоменклатуры.СтранаПроисхождения);
		
		КомплектБУХ.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НовСтрока, Истина);
	КонецЦикла;
	КомплектБУХ.СуммаДокумента = КомплектБУХ.Комплектующие.Итог("Сумма");
	

	Попытка
		Если НЕ ПроводитьДокументы Тогда
			КомплектБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			КомплектБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + КомплектБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + КомплектБУХ.Номер);
		КонецЕсли;
				
	Исключение 
		Сообщить("Пропущен документ комплект: " + КомплектУТ.Номер);
	КонецПопытки;	
		
КонецПроцедуры

Процедура СоздатьПеремещение(ПеремещениеУТ, ПеремещениеБУХ) Экспорт
	
	Если НЕ ПеремещениеБУХ.Пустая() тогда
		ПеремещениеБУХ = ПеремещениеБУХ.ПолучитьОбъект();
		ПеремещениеБУХ.Товары.Очистить();
	Иначе
		ПеремещениеБУХ = Документы.ПеремещениеТоваров.СоздатьДокумент();
		ПеремещениеБУХ.Номер				= ПеремещениеУТ.Номер;
	КонецЕсли;
	
	ПеремещениеБУХ.Дата 					= ПеремещениеУТ.Дата;
	ПеремещениеБУХ.ВидОперации				= Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	ЗаполнитьШапкуДокумента(ПеремещениеБУХ, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(),);
	
	ПеремещениеБУХ.Комментарий 				= ПеремещениеУТ.Комментарий;
	ПеремещениеБУХ.СкладОтправитель			= НайтиСклад(ПеремещениеУТ.СкладОтправитель);//Справочники.Склады.НайтиПоКоду(ПеремещениеУТ.СкладОтправитель.Код);
	ПеремещениеБУХ.СкладПолучатель			= НайтиСклад(ПеремещениеУТ.СкладПолучатель);//Справочники.Склады.НайтиПоКоду(ПеремещениеУТ.СкладПолучатель.Код);
	ПеремещениеБУХ.Организация				= Организация;
	ПеремещениеБУХ.Ответственный			= Ответственный;
	ПеремещениеБУХ.НДСвСтоимостиТоваров		= НайтиПеречисление(УТ.XMLString(ПеремещениеУТ.НДСвСтоимостиТоваров), "НДСВСтоимости");
	
	ПеремещениеБУХ.ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию();
	
	ТоварыУТ = ПеремещениеУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ПеремещениеБУХ.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмерения = ТоварБух.БазоваяЕдиницаИзмерения;
		НовСтрока.КоличествоМест = Стр.КоличествоМест;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		НовСтрока.Коэффициент = Стр.Коэффициент;
		НовСтрока.Цена = Стр.Цена;
	
		ПеремещениеБУХ.ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НовСтрока, "Товары", Истина);
	КонецЦикла;


	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ПеремещениеБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ПеремещениеБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + ПеремещениеБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + ПеремещениеБУХ.Номер);
		КонецЕсли;
				
	Исключение 
		Сообщить("Пропущен документ перемещение: " + ПеремещениеУТ.Номер);
	КонецПопытки;	
		
КонецПроцедуры

Процедура СоздатьОтчетОРозничныхПродажах(ОтчетУТ, ОтчетБУХ) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетБУХ) Тогда
		ОтчетБУХ = ОтчетБУХ.ПолучитьОбъект();
		ОтчетБУХ.Товары.Очистить();
	Иначе
		ОтчетБУХ = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетБУХ.Номер				= ОтчетУТ.Номер;
	КонецЕсли;
	
	ОтчетБУХ.Дата 					= ОтчетУТ.Дата;
	ОтчетБУХ.ВалютаДокумента 		= Константы.ВалютаРегламентированногоУчета.Получить();
	ОтчетБУХ.ВидОперации 			= Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	ОтчетБУХ.Комментарий 			= ОтчетУТ.Комментарий;
	ОтчетБУХ.Склад 					= НайтиСклад(ОтчетУТ.Склад);
	ОтчетБУХ.Организация			= Организация;
	ОтчетБУХ.Ответственный			= Ответственный;
	
	ОтчетБУХ.КурсДокумента			= 1;
	ОтчетБУХ.УчитыватьНДС			= ОтчетУТ.УчитыватьНДС;
	ОтчетБУХ.СуммаВключаетНДС		= ОтчетУТ.СуммаВключаетНДС;	
	ОтчетБУХ.СуммаДокумента			= ОтчетУТ.СуммаДокумента;
	ОтчетБУХ.СчетКасса				= ПланыСчетов.Хозрасчетный.КассаОрганизации;
	
	ТоварыУТ = ОтчетУТ.Товары; //Цикл по ТЧ "Товары"
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		
		НовСтрока = ОтчетБУХ.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура 	= СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура 	= ТоварБух;
		КонецЕсли;
		
		//НовСтрока.ЕдиницаИзмерения 	= ТоварБух.БазоваяЕдиницаИзмерения;
		НовСтрока.Количество 		= Стр.Коэффициент*Стр.Количество;
		НовСтрока.Цена 				= Стр.Цена/Стр.Коэффициент;
		НовСтрока.Сумма 			= Стр.Сумма;
		НовСтрока.НомерГТД			= НайтиГТД(Стр.СерияНоменклатуры.НомерГТД.Код);
		НовСтрока.СтранаПроисхождения = НайтиСтрану(Стр.СерияНоменклатуры.СтранаПроисхождения);
		
		Если ОтчетБУХ.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ОтчетБУХ);
		КонецЕсли;
		
		ОтчетБУХ.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НовСтрока, Истина);
	КонецЦикла;
	//НаклБух.ЗаполнитьСчетаУчетаВТабЧасти(НаклБух.Товары, "Товары", Истина);
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ОтчетБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ОтчетБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + ОтчетБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + ОтчетБУХ.Номер);
		КонецЕсли;
				
	Исключение 
		Сообщить("Пропущен документ отчет: " + ОтчетУТ.Номер);
	КонецПопытки;	

	
КонецПроцедуры

Процедура СоздатьТребование(ТребованиеУТ, ТребованиеБУХ) Экспорт
	
	Если НЕ ТребованиеБУХ.Пустая() тогда
		ТребованиеБУХ = ТребованиеБУХ.ПолучитьОбъект();
		ТребованиеБУХ.Материалы.Очистить();
	Иначе
		ТребованиеБУХ = Документы.ТребованиеНакладная.СоздатьДокумент();
		ТребованиеБУХ.Номер					= ТребованиеУТ.Номер;
	КонецЕсли;
	
	ТребованиеБУХ.Дата 						= ТребованиеУТ.Дата;
	ЗаполнитьШапкуДокумента(ТребованиеБУХ, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(),);
	
	ТребованиеБУХ.Комментарий 				= ТребованиеУТ.Комментарий;
	ТребованиеБУХ.Склад						= НайтиСклад(ТребованиеУТ.Склад);//Справочники.Склады.НайтиПоКоду(ПеремещениеУТ.СкладОтправитель.Код);
	ТребованиеБУХ.Организация				= Организация;
	ТребованиеБУХ.Ответственный				= Ответственный;
	ТребованиеБУХ.НДСвСтоимостиТоваров		= НайтиПеречисление(УТ.XMLString(ТребованиеУТ.НДСвСтоимостиТоваров), "НДСВСтоимости");
	ТребованиеБУХ.СчетЗатрат				= СчетЗатратТребование;
	
	ТоварыУТ = ТребованиеУТ.Материалы; //Цикл по ТЧ.Материалы
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(Стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			//Если Не ТоварБух.Пустая() Тогда 
			//	Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
			//		ТоварОбъект = ТоварБух.ПолучитьОбъект();
			//		Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
			//		ТоварОбъект.Код = Стр.Номенклатура.Код;
			//		ТоварОбъект.Записать();
			//		
			//		ТоварБух = ТоварОбъект.Ссылка;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ТребованиеБУХ.Материалы.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.ЕдиницаИзмерения = ТоварБух.БазоваяЕдиницаИзмерения;
		НовСтрока.КоличествоМест = Стр.КоличествоМест;
		НовСтрока.Количество = Стр.Количество*стр.Коэффициент;
		НовСтрока.Коэффициент = Стр.Коэффициент;
		
		Если ЗначениеЗаполнено(Стр.СерияНоменклатуры.Код) Тогда
			НовСтрока.НомерГТД = НайтиГТД(Стр.СерияНоменклатуры.НомерГТД.Код);
			НовСтрока.СтранаПроисхождения = НайтиСтрану(Стр.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
		
		ТребованиеБУХ.ЗаполнитьСчетаУчетаВСтрокеТабЧасти(НовСтрока, "Материалы", Истина);
	КонецЦикла;


	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ТребованиеБУХ.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ТребованиеБУХ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
		Если НЕ ПропускатьРанееЗанесенныеДокументы Тогда
			Сообщить("Изменен документ: " + ТребованиеБУХ.Номер);
		Иначе
			Сообщить("Создан документ: " + ТребованиеБУХ.Номер);
		КонецЕсли;
				
	Исключение 
		Сообщить("Пропущен документ требование: " + ТребованиеУТ.Номер);
	КонецПопытки;	
		
КонецПроцедуры













 