//Перем УТ;

//Поиск и перенос всех документов, отмеченных флажками 
Процедура КнопкаСформироватьНажатие(Кнопка)
	
	
	
	Объект = новый COMобъект("V82.COMConnector"); 
	User = ИмяПользователя;
	Pass = Пароль;
	Путь = ПутькБазе;
	Сервер = ИмяСервера;
	База = БазаНаСервере;
	
	Параметры = "File=""" + ПутькБазе + """; Usr=""" + ИмяПользователя + """; Pwd="""+Пароль+""";";
	Если СерверноеПодключение Тогда 
		Попытка
			Открыть = УТ.Connect("Srvr="""+Сервер+""";Ref="""+БазаНаСервере+""";Usr="""+User+""";Pwd="""+Pass+""";");
		Исключение
			Сообщить("База не открыта! Проверьте параметры!");
		КонецПопытки;
	Иначе
		УТ = Объект.Connect(Параметры);
	КонецЕсли;
	
	
	
	
		
	Если ПереноситьПлатежноеПоручениееИсходящее Тогда
		Сообщить("************************************************************");
		Сообщить("**** Перенос документов ""ПлатежноеПоручениеИсходящее"" ****");
		Сообщить("************************************************************");
		
		ППИ_УТ  = УТ.Документы.ПлатежноеПоручение.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		ППИ_Бух = Документы.ПлатежноеПоручениеИсходящее;
		
		Пока ППИ_УТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(ППИ_УТ) Тогда
			    Продолжить;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
			
			НайденнаяПлатежка = НайтиИсходящуюПлатежку(ППИ_УТ); 
			Если НЕ НайденнаяПлатежка.Пустая() Тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьИсходящуюПлатежку(ППИ_УТ, НайденнаяПлатежка);
				Иначе 
					Сообщить("Пропущен документ: """ + НайденнаяПлатежка.Номер + """ от: " + Формат(НайденнаяПлатежка.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьИсходящуюПлатежку(ППИ_УТ, НайденнаяПлатежка);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;
		Сообщить("  ");
	КонецЕсли;
	
	
	Если ПереноситьПлатежноеПоручениеВходящее Тогда
		Сообщить("************************************************************");
		Сообщить("**** Перенос документов ""ПлатежноеПоручениеВходящее"" ****");
		Сообщить("************************************************************");
		
		ППВ_УТ  = УТ.Документы.ПлатежноеПоручениеВходящее.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		
		Пока ППВ_УТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(ППВ_УТ) Тогда
			    Продолжить;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
			
			ППВ_Бух = Документы.ПоступлениеНаРасчетныйСчет.НайтипоНомеру(ППВ_УТ.Номер, ППВ_УТ.Дата);
			Если НЕ ППВ_Бух.Пустая() тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьВходящуюПлатежку(ППВ_УТ, ППВ_Бух);
				Иначе 
					Сообщить("Пропущен документ: """ + ППВ_Бух.Номер + """ от: " + Формат(ППВ_Бух.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьВходящуюПлатежку(ППВ_УТ, ППВ_Бух);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;
		Сообщить("  ");
	КонецЕсли;
	
	
	Если ПереноситьРеализацияТоваровУслуг Тогда 
		Сообщить("***********************************************************");
		Сообщить("****** Перенос документов ""РеализацияТоваровУслуг"" ******");
		Сообщить("***********************************************************");
		
		РеализацияУТ = УТ.Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		
		Пока РеализацияУТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(РеализацияУТ) Тогда
			    Продолжить;
			КонецЕсли;
            ОбработкаПрерыванияПользователя();
			
			РеализДрБазаНомер="РМ"+ Прав(РеализацияУТ.Номер,6);
			РеализацияБУХ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(РеализДрБазаНомер, РеализацияУТ.Дата);
			
			Если НЕ РеализацияБУХ.Пустая() тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьРеализацию(РеализацияУТ, РеализацияБУХ);
					//Сообщить("Создали документ: " + НаклБух.Номер);
				Иначе 
					Сообщить("Пропущен документ: """ + РеализацияБУХ.Номер + """ от: " + Формат(РеализацияБУХ.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьРеализацию(РеализацияУТ, РеализацияБУХ);
				//Сообщить("Создали документ: " + НаклБух.Номер);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;

	КонецЕсли;
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	Сообщить(" ");
	Сообщить("****** Перенос документов успешно завершен! ******");
	УТ = "";
	 Объект ="";
КонецПроцедуры

Функция ПереноситьДокумент(Док)
//	Если  Док.ОтражатьВБухгалтерскомУчете = Ложь Тогда
//		Возврат Ложь;
//	КонецЕсли;
	
	Если Док.ПометкаУдаления = Истина тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Док.Организация.ИНН <> Организация.ИНН тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
  

//Процедуры для переноса документов "Поступление ТоваровУслуг", "Авансовый отчет"
Функция СоздатьПоступлениеИзПереработки(ПоступленияУТ)
	
	ИзПереработкиБух = Документы.ПоступлениеИзПереработки.СоздатьДокумент();
	ИзПереработкиБух.Дата 					= ПоступленияУТ.Дата;
	ИзПереработкиБух.Номер					= ПоступленияУТ.Номер;
	ЗаполнитьШапкуДокумента(ИзПереработкиБух, глЗначениеПеременной("глТекущийПользователь"), Константы.ВалютаРегламентированногоУчета.Получить(), "Покупка");
	
	ИзПереработкиБух.ВалютаДокумента 		= Константы.ВалютаРегламентированногоУчета.Получить();
	ИзПереработкиБух.Контрагент 			= НайтиКонтрагента(ПоступленияУТ.Контрагент);
	ИзПереработкиБух.ДоговорКонтрагента		= НайтиДоговор(ПоступленияУТ.ДоговорКонтрагента, ИзПереработкиБух.Контрагент,"Поставщик");
	ИзПереработкиБух.Комментарий 			= ПоступленияУТ.Комментарий;
	ИзПереработкиБух.КратностьВзаиморасчетов = 1;
	ИзПереработкиБух.КурсВзаиморасчетов 	= 1;
	ИзПереработкиБух.Склад 					= ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ИзПереработкиБух.Организация			= Организация;
	ИзПереработкиБух.СпособЗачетаАвансов	= Перечисления.СпособыЗачетаАвансов.Автоматически;
	ИзПереработкиБух.УчитыватьНДС			= ПоступленияУТ.УчитыватьНДС;
	ИзПереработкиБух.СуммаВключаетНДС		= ПоступленияУТ.СуммаВключаетНДС;
	ИзПереработкиБух.Ответственный			= Ответственный;
	
	//СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ИзПереработкиБух.Контрагент, ИзПереработкиБух.ДоговорКонтрагента);
	//ИзПереработкиБух.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	//ИзПереработкиБух.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	//ИзПереработкиБух.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	//ИзПереработкиБух.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
	ТоварыУТ = ПоступленияУТ.Товары; //Цикл по ТЧ.Товары
	Для каждого Стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		Если НЕ ЗначениеЗаполнено(ТоварБух) Тогда  //попробуем найти по точному наименованию
			ТоварБух = Справочники.Номенклатура.НайтиПоНаименованию(Стр.Номенклатура.Наименование, Истина);
			Если Не ТоварБух.Пустая() Тогда 
				Если ТоварБух.Код <>  Стр.Номенклатура.Код Тогда
					ТоварОбъект = ТоварБух.ПолучитьОбъект();
					Сообщить("Изменен код товара : " + Строка(ТоварБух.Код) + " -> " + Строка(Стр.Номенклатура.Код));
					ТоварОбъект.Код = Стр.Номенклатура.Код;
					ТоварОбъект.Записать();
					
					ТоварБух = ТоварОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		НовСтрока = ИзПереработкиБух.Продукция.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.Количество = Стр.Количество;
		НовСтрока.ПлановаяСтоимость = Стр.Цена;
		НовСтрока.СуммаПлановая = Стр.Сумма;

		//СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, НовСтрока.Номенклатура, ИзПереработкиБух.Склад);
		//НовСтрока.Счет    = СчетаУчета.СчетУчета;
	КонецЦикла;
	
	
	УслугиУТ = ПоступленияУТ.Услуги;
	Для каждого Стр из УслугиУТ цикл
		УслугаБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		НовСтрока = ИзПереработкиБух.Услуги.Добавить();
		Если НЕ ЗначениеЗаполнено(УслугаБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = УслугаБух;
		КонецЕсли;
		
		НовСтрока.Содержание = Стр.Содержание;
		НовСтрока.Количество = Стр.Количество;
		НовСтрока.Цена = стр.Цена;
		НовСтрока.Сумма = стр.Сумма;
		
		Если ИзПереработкиБух.УчитыватьНДС тогда
			НовСтрока.СтавкаНДС = НайтиПеречисление(УТ.XMLString(Стр.СтавкаНДС), "НДС");
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ИзПереработкиБух);
		КонецЕсли;
		
		//СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, НовСтрока.Номенклатура, ИзПереработкиБух.Склад);
		//НовСтрока.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		
		НовСтрока.СтатьяЗатрат = НовСтрока.Номенклатура.СтатьяЗатрат;
	КонецЦикла;
	
	
	Попытка
		Если НЕ ПроводитьДокументы Тогда
			ИзПереработкиБух.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			ИзПереработкиБух.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		Возврат ИзПереработкиБух.Ссылка;
	Исключение 
		Сообщить("Пропущен документ: " + ПоступленияУТ.Номер);
		Возврат Неопределено;
	КонецПопытки;	
		
КонецФункции
 //
Функция СоздатьДопРасходы(ДопРасходы)
	
	ДопРасходыБух = Документы.ПоступлениеДопРасходов.СоздатьДокумент();
	
	ДопРасходыБух.Номер					= ДопРасходы.Номер;
	ДопРасходыБух.Дата					= ДопРасходы.Дата;
	ДопРасходыБух.НомерВходящегоДокумента= ДопРасходы.НомерВходящегоДокумента;
	ДопРасходыБух.ВалютаДокумента 		= Константы.ВалютаРегламентированногоУчета.Получить();
	ДопРасходыБух.ДатаВходящегоДокумента= ДопРасходы.ДатаВходящегоДокумента;
	ДопРасходыБух.Контрагент 			= НайтиКонтрагента(ДопРасходы.Контрагент);
	ДопРасходыБух.ДоговорКонтрагента	= НайтиДоговор(ДопРасходы.ДоговорКонтрагента, ДопРасходыБух.Контрагент, "Поставщик");
	ДопРасходыБух.Комментарий 			= ДопРасходы.Комментарий;
	ДопРасходыБух.Содержание			= ДопРасходы.Содержание;
	ДопРасходыБух.Ответственный			= Ответственный;
	
	ДопРасходыБух.Сумма		 			= ДопРасходы.Сумма;
	ДопРасходыБух.КратностьВзаиморасчетов = 1;
	ДопРасходыБух.КурсВзаиморасчетов 	= 1;
	
	ВходящийСФ =  НайтиСФ_В_УТ(ДопРасходы, "Полученный");
	Если ВходящийСФ <> Неопределено Тогда 
		ДопРасходыБух.ПредъявленСчетФактура = Истина;
		ДопРасходыБух.НомерВходящегоСчетаФактуры = ВходящийСФ.Номер;
		ДопРасходыБух.ДатаВходящегоСчетаФактуры = ВходящийСФ.Дата;
	КонецЕсли;
	
	ДопРасходыБух.Организация			= Организация;
	ДопРасходыБух.УчитыватьНДС			= ДопРасходы.УчитыватьНДС;
	ДопРасходыБух.СуммаВключаетНДС		= ДопРасходы.СуммаВключаетНДС;
	ДопРасходыБух.СпособЗачетаАвансов	= Перечисления.СпособыЗачетаАвансов.Автоматически;
	ДопРасходыБух.СпособРаспределения	= Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	
	ДопРасходыБух.ЗаполнитьСчетаУчетаРасчетов();
	
	ДопРасходыБух.СтавкаНДС			= НайтиПеречисление(УТ.XMLString(ДопРасходы.СтавкаНДС), "НДС");
	ДопРасходыБух.СуммаНДС			= ДопРасходы.СуммаНДС;
	
	ТоварыУТ = ДопРасходы.Товары;
	
	Для Каждого стр из ТоварыУТ Цикл
		ТоварБух = Справочники.Номенклатура.НайтиПоКоду(стр.Номенклатура.Код);
		НовСтрока = ДопРасходыБух.Товары.Добавить();
		Если НЕ ЗначениеЗаполнено(ТоварБух) тогда
			НовСтрока.Номенклатура = СоздатьТовар(Стр.Номенклатура);
		Иначе
			НовСтрока.Номенклатура = ТоварБух;
		КонецЕсли;
		
		НовСтрока.Количество = стр.Количество;
		НовСтрока.Сумма = Стр.Сумма;
		НовСтрока.СуммаТовара = стр.СуммаТовара;
		НовСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		НайденноеПоступление = "";
		
		НовСтрока.ДокументПартии = НайтиПоступление(Стр.ДокументПартии); 
		
		Если ДопРасходыБух.УчитыватьНДС тогда
			НовСтрока.СуммаНДС = стр.СуммаНДС;
			РассчитатьСуммуНДСТабЧасти(НовСтрока, ДопРасходыБух);
		КонецЕсли;
		
	КонецЦикла;
	ДопРасходыБух.ЗаполнитьСчетаУчетаВТабЧасти(ДопРасходыБух.Товары, Истина, Истина);
	
	Попытка
		ДопРасходыБух.Записать(РежимЗаписиДокумента.Запись);
		Возврат ДопРасходыБух.Ссылка;
	Исключение 
		Сообщить("Пропущен документ: " + ДопРасходы.Номер);
		Сообщить(ОписаниеОшибки());
		Сообщить(" ");
		Возврат Неопределено;
	КонецПопытки;	
	
КонецФункции


//Процедуры для переноса документов "ППИ", "ППВ"
Функция НайтиИсходящуюПлатежку(ППИ_УТ)
	
	СтрНомер = "РМ" + ПРАВ(ППИ_УТ.Номер, 6);
	НайденнаяПлатежка = Документы.ПлатежноеПоручениеИсходящее.НайтиПоНомеру(СтрНомер, ППИ_УТ.Дата);
	
	Возврат НайденнаяПлатежка;
	
КонецФункции


//Процедуры для переноса и синхронизации справочников
Процедура КоманднаяПанельСправочникиЗаполнить(Кнопка)
	СписокЭлементов.Очистить();
	
	Объект = новый COMобъект("V83.COMConnector.1"); 
	User = ИмяПользователя;
	Pass = Пароль;
	Путь = ПутькБазе;
	Сервер = ИмяСервера;
	База = БазаНаСервере;
	
	Параметры = "File=""" + ПутькБазе + """; Usr=""" + ИмяПользователя + """; Pwd="""+Пароль+""";";
	Если СерверноеПодключение Тогда 
		Попытка
			Открыть = УТ.Connect("Srvr="""+Сервер+""";Ref="""+БазаНаСервере+""";Usr="""+User+""";Pwd="""+Pass+""";");
		Исключение
			Сообщить("База не открыта! Проверьте параметры!");
		КонецПопытки;
	Иначе
		УТ = Объект.Connect(Параметры);
	КонецЕсли;
	
	Если СинхронизироватьСправочникНоменклатура Тогда 
		НомУТ = УТ.Справочники.Номенклатура.Выбрать();
		н = 1;
		Пока НомУТ.Следующий() цикл
			ОбработкаПрерыванияПользователя();
			
			Если НомУТ.ЭтоГруппа Тогда 
				Продолжить;
			КонецЕсли;
			ДрБазаНаименование=Лев(НомУТ.Наименование,50);
			НовСтр = СписокЭлементов.Добавить();
			НовСтр.Код = НомУТ.Код;
			НовСтр.Наименование = ДрБазаНаименование;
			НовСтр.НомерСтроки = н;
			Если Справочники.Номенклатура.НайтиПоНаименованию(ДрБазаНаименование).Пустая() Тогда 
				НовСтр.Существует = "Нет";
				НовСтр.Пометка = истина;

			Иначе
				НовСтр.Существует = "Да";
				НовСтр.Пометка = Ложь;

			КонецЕсли;
			н = н + 1;
			Состояние(Строка(н)); 
		КонецЦикла;
	КонецЕсли;
	
	
	Если СинхронизироватьСправочникКонтрагенты Тогда 
		КонтрагентУТ = УТ.Справочники.Контрагенты.Выбрать();
		н = 1;
		Пока КонтрагентУТ.Следующий() цикл
			ОбработкаПрерыванияПользователя();
			
			Если КонтрагентУТ.ЭтоГруппа Тогда 
				Продолжить;
			КонецЕсли;
			
			НовСтр = СписокЭлементов.Добавить();
			НовСтр.Код = КонтрагентУТ.ИНН;
			НовСтр.Наименование = КонтрагентУТ.Наименование;
			НовСтр.Пометка = Ложь;
			НовСтр.НомерСтроки = н;
			Если Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",КонтрагентУТ.ИНН).Пустая() Тогда 
				НовСтр.Существует = "Нет";
				НовСтр.Пометка = истина;

			Иначе
				НовСтр.Существует = "Да";
				НовСтр.Пометка = Ложь;

			КонецЕсли;
			
			н = н + 1;
			Состояние(Строка(н)); 
		КонецЦикла;
	КонецЕсли;
	
	Если СинхронизироватьСправочникСклады Тогда 
		СкладУТ = УТ.Справочники.Склады.Выбрать();
		н = 1;
		Пока СкладУТ.Следующий() цикл
			ОбработкаПрерыванияПользователя();
			
			Если СкладУТ.ЭтоГруппа Тогда 
				Продолжить;
			КонецЕсли;
			
			НовСтр = СписокЭлементов.Добавить();
			НовСтр.Код = СкладУТ.Код;
			НовСтр.Наименование = СкладУТ.Наименование;
			НовСтр.Пометка = Ложь;
			НовСтр.НомерСтроки = н;
			
			Если Справочники.Склады.НайтиПоКоду(СкладУТ.Код).Пустая() Тогда 
				НовСтр.Существует = "Нет";
			Иначе
				НовСтр.Существует = "Да";
			КонецЕсли;
			
			н = н + 1;
			Состояние(Строка(н)); 
		КонецЦикла;
	КонецЕсли;	
	
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();
	
	//Сообщить("****** Таблица для переноса заполнена! ******");
	УТ = "";
	
КонецПроцедуры

Процедура СписокЭлементовПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого Стр Из ОформленияСтрок Цикл
		Если Стр.ДанныеСтроки.Существует = "Нет" Тогда 
			Стр.ЦветФона = WebЦвета.СветлоРозовый;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОсновныеДействияФормы1ОсновныеДействияФормыСинхронизировать(Кнопка)
	
	Если СписокЭлементов.Количество() = 0 Тогда 
		Сообщить("Не заполнена таблица для синхронизации!");
		Возврат;
	КонецЕсли;
	
	Объект = новый COMобъект("V83.COMConnector.1"); 
	User = ИмяПользователя;
	Pass = Пароль;
	Путь = ПутькБазе;
	Сервер = ИмяСервера;
	База = БазаНаСервере;
	
	Параметры = "File=""" + ПутькБазе + """; Usr=""" + ИмяПользователя + """; Pwd="""+Пароль+""";";
	Если СерверноеПодключение Тогда 
		Попытка
			Открыть = УТ.Connect("Srvr="""+Сервер+""";Ref="""+БазаНаСервере+""";Usr="""+User+""";Pwd="""+Pass+""";");
		Исключение
			Сообщить("База не открыта! Проверьте параметры!");
		КонецПопытки;
	Иначе
		УТ = Объект.Connect(Параметры);
	КонецЕсли;
	
	к = 0;
	Для Каждого Стр Из СписокЭлементов Цикл
		ОбработкаПрерыванияПользователя();
	
		Если НЕ Стр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СинхронизироватьСправочникНоменклатура Тогда
			ТоварУт = УТ.Справочники.Номенклатура.НайтиПоНаименованию(Лев(Стр.Наименование,50)); //Нашли товар в УТ, для определения реквизитов
			ТоварБух = СоздатьТовар(ТоварУТ, Ложь); //Если товар уже есть в БУХ, то синхронизируем его реквизиты
		КонецЕсли;
		
		Если СинхронизироватьСправочникКонтрагенты Тогда
			КонтрагентУТ = УТ.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Стр.Код);
			КонтрагентБух = СоздатьКонтрагента(КонтрагентУТ, ложь);
		КонецЕсли;
		
		Если СинхронизироватьСправочникСклады Тогда 
			СкладУТ = УТ.Справочники.Склады.НайтиПоКоду(Стр.Код);
			СкладБух = НайтиСклад(СкладУТ);
		КонецЕсли;
		
		к = к + 1;
	КонецЦикла;
	
	Сообщить("");
	Сообщить("****** Перенос справочников успешно завершен! ******");
	Сообщить("Перенесено (" + Строка(к) + ") элемент(ов).");
	УТ = ""
КонецПроцедуры

Процедура СинхронизироватьСправочникКонтрагентыПриИзменении(Элемент)
	СинхронизироватьСправочникНоменклатура = Ложь;
	СинхронизироватьСправочникСклады = Ложь;
	СписокЭлементов.Очистить();
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();
КонецПроцедуры

Процедура СинхронизироватьСправочникНоменклатураПриИзменении(Элемент)
	СинхронизироватьСправочникКонтрагенты = Ложь;
	СинхронизироватьСправочникСклады = Ложь;
	СписокЭлементов.Очистить();
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();	
КонецПроцедуры

Процедура СинхронизироватьСправочникСкладыПриИзменении(Элемент)
	СинхронизироватьСправочникНоменклатура = Ложь;
	СинхронизироватьСправочникКонтрагенты = Ложь;
	СписокЭлементов.Очистить();
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();	
КонецПроцедуры

    

//Процедуры общего назначения
Процедура ПриЗакрытии()
	СохранитьЗначение("ДатаНач",ДатаНач);
	СохранитьЗначение("ДатаКон",ДатаКон);
	СохранитьЗначение("Организация",Организация);

	СохранитьЗначение("СтатьяДоходовОприходование",СтатьяДоходовОприходование);
	СохранитьЗначение("ТипЦеныДляРозничногоСклада", ТипЦеныДляРозничногоСклада);
	СохранитьЗначение("СчетЗатратТребование", СчетЗатратТребование);
КонецПроцедуры
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ДатаНач = ВосстановитьЗначение("ДатаНач");
	ДатаКон = ВосстановитьЗначение("ДатаКон");
	Организация = ВосстановитьЗначение("Организация");
	КонтрагентыДляПоступленияИзПереработки = ВосстановитьЗначение("КонтрагентыДляПоступленияИзПереработки");
	СтатьяДоходовОприходование = ВосстановитьЗначение("СтатьяДоходовОприходование");
	ТипЦеныДляРозничногоСклада = ВосстановитьЗначение("ТипЦеныДляРозничногоСклада");
	СчетЗатратТребование = ВосстановитьЗначение("СчетЗатратТребование");
	
	Ответственный = ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ЭлементыФормы.НадписьОтветственный.Значение = Строка(Ответственный);
	ПропускатьРанееЗанесенныеДокументы = Истина;	
КонецПроцедуры

Процедура ПриОткрытии()
	СписокЭлементов.Колонки.Добавить("НомерСтроки",,"№",3);
	СписокЭлементов.Колонки.Добавить("Пометка",,,3);	
	СписокЭлементов.Колонки.Добавить("Код",,,10);
    СписокЭлементов.Колонки.Добавить("Наименование",,,20);
	СписокЭлементов.Колонки.Добавить("Существует",,,3);
	ЭлементыФормы.СписокЭлементов.СоздатьКолонки();
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();	
	
	ЭлементыФормы.СписокЭлементов.Колонки.Пометка.ДанныеФлажка="Пометка";
	ЭлементыФормы.СписокЭлементов.Колонки.Пометка.Данные="";
	ЭлементыФормы.СписокЭлементов.Колонки.Пометка.ТолькоПросмотр=Ложь;
	ЭлементыФормы.СписокЭлементов.Колонки.Пометка.РежимРедактирования=РежимРедактированияКолонки.Непосредственно;
КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	ДатаКон = КонецДня(ДатаКон);
КонецПроцедуры

Процедура СерверноеПодключениеПриИзменении(Элемент)
	Если СерверноеПодключение Тогда 
		ЭлементыФормы.ИмяСервера.Видимость = Истина;
		ЭлементыФормы.БазаНаСервере.Видимость = Истина;
	Иначе
		ЭлементыФормы.ИмяСервера.Видимость = Ложь;
		ЭлементыФормы.БазаНаСервере.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереноситьПлатежноеПоручениееИсходящееПриИзменении(Элемент)
КонецПроцедуры

Процедура ПереноситьПлатежныйОрдерСписаниеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры


Процедура НадписьПерейтиПоСсылкеНажатие(Элемент)
	ЗапуститьПриложение(ЭлементыФормы.НадписьПерейтиПоСсылке.Значение);
КонецПроцедуры


Процедура ПропускатьРанееЗанесенныеДокументыПриИзменении(Элемент)
	Если ПропускатьРанееЗанесенныеДокументы Тогда 
		ЭлементыФормы.НадписьПодсказка.Значение = "Если документ встречается в БУХ базе, он будет пропущен!";
	Иначе
		ЭлементыФормы.НадписьПодсказка.Значение = "ВНИМАНИЕ! Все найденные документы будут заменены!";
	КонецЕсли;
КонецПроцедуры


Процедура КоманднаяПанельСправочникиПометитьВсе(Кнопка)
	Для Каждого Стр Из СписокЭлементов Цикл 
		Стр.Пометка = Истина;		
	КонецЦикла;
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();
КонецПроцедуры

Процедура КоманднаяПанельСправочникиСнятьВсеПометки(Кнопка)
	Для Каждого Стр Из СписокЭлементов Цикл 
		Стр.Пометка = Ложь;		
	КонецЦикла;
	ЭлементыФормы.СписокЭлементов.ОбновитьСтроки();
КонецПроцедуры

Процедура ПеренестиНажатие(Элемент)
		
	
	
	Объект = новый COMобъект("V83.COMConnector.1"); 
	User = ИмяПользователя;
	Pass = Пароль;
	Путь = ПутькБазе;
	Сервер = ИмяСервера;
	База = БазаНаСервере;
	
	Параметры = "File=""" + ПутькБазе + """; Usr=""" + ИмяПользователя + """; Pwd="""+Пароль+""";";
	Если СерверноеПодключение Тогда 
		Попытка
			Открыть = УТ.Connect("Srvr="""+Сервер+""";Ref="""+БазаНаСервере+""";Usr="""+User+""";Pwd="""+Pass+""";");
		Исключение
			Сообщить("База не открыта! Проверьте параметры!");
		КонецПопытки;
	Иначе
		УТ = Объект.Connect(Параметры);
	КонецЕсли;
	
	
	                       
	
		
	Если ПереноситьПлатежноеПоручениееИсходящее Тогда
		Сообщить("************************************************************");
		Сообщить("**** Перенос документов ""ПлатежноеПоручениеИсходящее"" ****");
		Сообщить("************************************************************");
		
		ППИ_УТ  = УТ.Документы.ПлатежноеПоручение.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		ППИ_Бух = Документы.ПлатежноеПоручениеИсходящее;
		
		Пока ППИ_УТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(ППИ_УТ) Тогда
			    Продолжить;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
			
			НайденнаяПлатежка = НайтиИсходящуюПлатежку(ППИ_УТ); 
			Если НЕ НайденнаяПлатежка.Пустая() Тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьИсходящуюПлатежку(ППИ_УТ, НайденнаяПлатежка);
				Иначе 
					Сообщить("Пропущен документ: """ + НайденнаяПлатежка.Номер + """ от: " + Формат(НайденнаяПлатежка.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьИсходящуюПлатежку(ППИ_УТ, НайденнаяПлатежка);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;
		Сообщить("  ");
	КонецЕсли;
	
	
	Если ПереноситьПлатежноеПоручениеВходящее Тогда
		Сообщить("************************************************************");
		Сообщить("**** Перенос документов ""ПлатежноеПоручениеВходящее"" ****");
		Сообщить("************************************************************");
		
		ППВ_УТ  = УТ.Документы.ПоступлениеНаРасчетныйСчет.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		
		Пока ППВ_УТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(ППВ_УТ) Тогда
			    Продолжить;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
			
			СтрНомер = "РМ" + ПРАВ(ППВ_УТ.Номер, 6);
			ППВ_Бух = Документы.ПлатежноеПоручениеВходящее.НайтипоНомеру(СтрНомер, ППВ_УТ.Дата);
			Если НЕ ППВ_Бух.Пустая() тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьВходящуюПлатежку(ППВ_УТ, ППВ_Бух);
				Иначе 
					Сообщить("Пропущен документ: """ + ППВ_Бух.Номер + """ от: " + Формат(ППВ_Бух.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьВходящуюПлатежку(ППВ_УТ, ППВ_Бух);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;
		Сообщить("  ");
	КонецЕсли;
	
	
	Если ПереноситьРеализацияТоваровУслуг Тогда 
		Сообщить("***********************************************************");
		Сообщить("****** Перенос документов ""РеализацияТоваровУслуг"" ******");
		Сообщить("***********************************************************");
		
		РеализацияУТ = УТ.Документы.РеализацияТоваровУслуг.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		
		Пока РеализацияУТ.Следующий() цикл
			Если НЕ ПереноситьДокумент(РеализацияУТ) Тогда
			    Продолжить;
			КонецЕсли;
            ОбработкаПрерыванияПользователя();
			
			РеализДрБазаНомер="РМ"+ Прав(РеализацияУТ.Номер,6);
			РеализацияБУХ = Документы.РеализацияТоваровУслуг.НайтиПоНомеру(РеализДрБазаНомер, РеализацияУТ.Дата);
			
			Если НЕ РеализацияБУХ.Пустая() тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьРеализацию(РеализацияУТ, РеализацияБУХ);
					//Сообщить("Создали документ: " + НаклБух.Номер);
				Иначе 
					Сообщить("Пропущен документ: """ + РеализацияБУХ.Номер + """ от: " + Формат(РеализацияБУХ.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьРеализацию(РеализацияУТ, РеализацияБУХ);
				//Сообщить("Создали документ: " + НаклБух.Номер);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;

	КонецЕсли;
	
	Если ПереноситьПлатежныйОрдерСписание Тогда 
		Сообщить("***********************************************************");
		Сообщить("****** Перенос документов ""ПлатежныйОрдерСписание"" ******");
		Сообщить("***********************************************************");
		
		РеализацияУТ = УТ.Документы.СписаниеСРасчетногоСчета.Выбрать(НачалоДня(ДатаНач),КонецДня(ДатаКон));
		
		Пока РеализацияУТ.Следующий() цикл
			//Сообщить(РеализацияУТ);
			Если НЕ ПереноситьДокумент(РеализацияУТ) Тогда
				Сообщить("не переносим "+ РеализацияУТ);
				Продолжить;
			КонецЕсли;
			СтрКонтр=РеализацияУТ.Контрагент.Description;
			
			//Если (Найти(СтрКонтр,"банк")=0) и (Найти(СтрКонтр,"ВТБ")=0) Тогда
//				Сообщить(РеализацияУТ.ВидОперации.Значение);
				//Продолжить;
			//КонецЕсли;   		
			Сообщить(СтрКонтр);

			//Если (РеализацияУТ.СуммаДокумента>10000) Тогда
			//    Сообщить("СУММА >10000"); Продолжить;
			//КонецЕсли;

			
			
            ОбработкаПрерыванияПользователя();
			
			РеализДрБазаНомер="РМ"+ Прав(РеализацияУТ.Номер,6);
			РеализацияБУХ = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.НайтиПоНомеру(РеализДрБазаНомер, РеализацияУТ.Дата);
			
			Если НЕ РеализацияБУХ.Пустая() тогда
				Если НЕ ПропускатьРанееЗанесенныеДокументы тогда
					СоздатьОрдерСписание(РеализацияУТ, РеализацияБУХ);
					//Сообщить("Создали документ: " + НаклБух.Номер);
				Иначе 
					Сообщить("Пропущен документ: """ + РеализацияБУХ.Номер + """ от: " + Формат(РеализацияБУХ.Дата, "ДЛФ=Д"));
					Продолжить;
				КонецЕсли;
			Иначе
				СоздатьОрдерСписание(РеализацияУТ, РеализацияБУХ);
				//Сообщить("Создали документ: " + НаклБух.Номер);
			КонецЕсли;
			
			Сообщить("*** *** ***");
			
		КонецЦикла;

	КонецЕсли;
	
	
	
	Сообщить(" ");
	Сообщить("****** Перенос документов успешно завершен! ******");
	УТ = "";
	 Объект ="";

КонецПроцедуры





ИмяПользователя="Администратор";
Пароль="sqll0ck";
//ПутькБазе="D:\Prostor2";
ПутькБазе="F:\IP";













